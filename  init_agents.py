#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤.
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ 
–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.
"""
import sys
import os
import argparse
import time
import logging
import requests
import json

print("üöÄ –°–∫—Ä–∏–ø—Ç init_agents.py –∑–∞–ø—É—â–µ–Ω!")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ –≤ –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("agents_init.log")
    ]
)
logger = logging.getLogger(__name__)

def check_lm_studio_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LM Studio."""
    try:
        from app.config import LLM_MODEL_PATH
        
        headers = {"Content-Type": "application/json"}
        data = {
            "model": "local-model",
            "messages": [{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."}],
            "temperature": 0.7,
            "max_tokens": 50
        }
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å LM Studio –ø–æ –∞–¥—Ä–µ—Å—É: {LLM_MODEL_PATH}")
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –±–æ–ª—å—à–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        response = requests.post(
            f"{LLM_MODEL_PATH}/chat/completions", 
            headers=headers, 
            json=data,
            timeout=10
        )
        
        if response.status_code == 200:
            response_data = response.json()
            content = response_data.get('choices', [{}])[0].get('message', {}).get('content', '')
            
            logger.info(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å LM Studio —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {content[:100]}...")
            return True
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ LM Studio: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            if hasattr(response, 'text'):
                logger.error(f"–û—Ç–≤–µ—Ç: {response.text[:200]}...")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å LM Studio: {e}")
        return False

def initialize_knowledge_base():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤."""
    try:
        logger.info("–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è JSONL —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs("app/knowledge/jsonl", exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π JSONL —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        basic_knowledge_file = "app/knowledge/jsonl/risk_knowledge.jsonl"
        if not os.path.exists(basic_knowledge_file):
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {basic_knowledge_file}")
            create_basic_knowledge_file(basic_knowledge_file)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        enhanced_knowledge_file = "app/knowledge/jsonl/enhanced_risk_knowledge.jsonl"
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        create_enhanced_knowledge_base(basic_knowledge_file, enhanced_knowledge_file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if os.path.exists(enhanced_knowledge_file):
            file_size = os.path.getsize(enhanced_knowledge_file)
            logger.info(f"‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∞: {enhanced_knowledge_file} (—Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç)")
            return True
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
        return False

def create_basic_knowledge_file(file_path):
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π."""
    # –ë–∞–∑–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è JSONL —Ñ–∞–π–ª–∞
    knowledge_items = [
        {
            "prompt": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
            "response": "–†–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - —ç—Ç–æ —Ä–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, –≤–∫–ª—é—á–∞—é—â—É—é –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –æ–ø–µ—Ä–∞—Ü–∏–π, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è —É–≥—Ä–æ–∑ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏.",
            "metadata": {
                "topic": "—Ä–∏—Å–∫_–Ω–∞—Ä—É—à–µ–Ω–∏—è_–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏",
                "difficulty": "–±–∞–∑–æ–≤—ã–π",
                "keywords": ["–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å", "–∫—Ä–µ–¥–∏—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å"],
                "related_questions": ["–ß—Ç–æ —Ç–∞–∫–æ–µ —É–≥—Ä–æ–∑–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏?", "–ö–∞–∫ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É—é—Ç—Å—è —É–≥—Ä–æ–∑—ã –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏?"]
            }
        },
        {
            "prompt": "–ß—Ç–æ —Ç–∞–∫–æ–µ —É–≥—Ä–æ–∑–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏?",
            "response": "–£–≥—Ä–æ–∑–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ (—á—Ä–µ–∑–≤—ã—á–∞–π–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è) - —ç—Ç–æ –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏, —Å–ª–æ–∂–∏–≤—à–∞—è—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∞–≤–∞—Ä–∏–∏, –æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–∏—Ä–æ–¥–Ω–æ–≥–æ —è–≤–ª–µ–Ω–∏—è, –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–≥–æ –æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è –æ–∫—Ä—É–∂–∞—é—â–∏—Ö, —Å—Ç–∏—Ö–∏–π–Ω–æ–≥–æ –∏–ª–∏ –∏–Ω–æ–≥–æ –±–µ–¥—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–≤–ª–µ—á—å –∏–ª–∏ –ø–æ–≤–ª–µ–∫–ª–∏ –∑–∞ —Å–æ–±–æ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –∂–µ—Ä—Ç–≤—ã, —É—â–µ—Ä–± –∑–¥–æ—Ä–æ–≤—å—é –ª—é–¥–µ–π –∏–ª–∏ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥–µ, –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ –∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –∂–∏–∑–Ω–µ–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ª—é–¥–µ–π.",
            "metadata": {
                "topic": "—Ä–∏—Å–∫_–Ω–∞—Ä—É—à–µ–Ω–∏—è_–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏",
                "difficulty": "–±–∞–∑–æ–≤—ã–π",
                "keywords": ["—É–≥—Ä–æ–∑–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏", "—á—Ä–µ–∑–≤—ã—á–∞–π–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–∞–≤–∞—Ä–∏—è", "–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞"],
                "related_questions": ["–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?", "–ö–∞–∫–∏–µ —Ç–∏–ø—ã —É–≥—Ä–æ–∑ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç?"]
            }
        },
        {
            "prompt": "–ö–∞–∫ —Ä–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ —Å–≤—è–∑–∞–Ω —Å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Ä–∏—Å–∫–æ–º?",
            "response": "–†–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–≤–∏–¥–æ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–∏—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π —Å—Ö–µ–º–µ (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, –æ—Ü–µ–Ω–∫–∞, —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥), —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏.",
            "metadata": {
                "topic": "—Ä–∏—Å–∫_–Ω–∞—Ä—É—à–µ–Ω–∏—è_–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏",
                "difficulty": "–±–∞–∑–æ–≤—ã–π",
                "keywords": ["–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∏—Å–∫", "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–º", "–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"],
                "related_questions": ["–ß—Ç–æ —Ç–∞–∫–æ–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∏—Å–∫?", "–ö–∞–∫–∏–µ —ç—Ç–∞–ø—ã –≤–∫–ª—é—á–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏?"]
            }
        },
        {
            "prompt": "–ö–∞–∫–∏–µ —Ç–∏–ø—ã —É–≥—Ä–æ–∑ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç?",
            "response": "–£–≥—Ä–æ–∑—ã –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ–ª—è—Ç—Å—è –Ω–∞ 7 —Ç–∏–ø–æ–≤: —Ç–µ—Ö–Ω–æ–≥–µ–Ω–Ω—ã–µ, –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ, –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ, –±–∏–æ–ª–æ–≥–æ-—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ, —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ. –£–≥—Ä–æ–∑—ã –∏–º–µ—é—Ç –º–∞—Å—à—Ç–∞–± –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–º –ø—É—Ç–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –û–±—â–∏–º –ø–ª–∞–Ω–æ–º –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–û–ù–∏–í–î) –∏ –†–µ–≥–ª–∞–º–µ–Ω—Ç–æ–º –û–ù–∏–í–î.",
            "metadata": {
                "topic": "—Ä–∏—Å–∫_–Ω–∞—Ä—É—à–µ–Ω–∏—è_–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏",
                "difficulty": "—Å—Ä–µ–¥–Ω–∏–π",
                "keywords": ["—É–≥—Ä–æ–∑—ã –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏", "—Ç–∏–ø—ã —É–≥—Ä–æ–∑", "–º–∞—Å—à—Ç–∞–± —É–≥—Ä–æ–∑—ã", "–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"],
                "related_questions": ["–ß—Ç–æ —Ç–∞–∫–æ–µ —É–≥—Ä–æ–∑–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏?", "–ö–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –º–∞—Å—à—Ç–∞–± –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–≥—Ä–æ–∑—ã?"]
            }
        },
        {
            "prompt": "–ß—Ç–æ —Ç–∞–∫–æ–µ –æ—Ü–µ–Ω–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤?",
            "response": "–û—Ü–µ–Ω–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ - —ç—Ç–æ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ—Ü–µ—Å—Å–∞–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–π, –æ—Å–Ω–æ–≤–Ω–æ–π –∏–ª–∏ –ø—Ä–æ—á–∏–π. –†–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –û—Ü–µ–Ω–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ ‚Ññ5908, –≤ —Ä–∞–º–∫–∞—Ö –∫–æ—Ç–æ—Ä–æ–π –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –ø–µ—Ä–µ—á–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø–æ—Ç–µ—Ä–∏ –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.",
            "metadata": {
                "topic": "–æ—Ü–µ–Ω–∫–∞_–∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏_–ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
                "difficulty": "—Å—Ä–µ–¥–Ω–∏–π",
                "keywords": ["–∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤", "–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏", "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å", "–º–µ—Ç–æ–¥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏"],
                "related_questions": ["–ö–∞–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—Ç?", "–ö–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞—é—Ç—Å—è –ø–æ—Ç–µ—Ä–∏ –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–æ—Ü–µ—Å—Å–∞?"]
            }
        }
    ]
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ JSONL —Ñ–∞–π–ª
    with open(file_path, 'w', encoding='utf-8') as file:
        for item in knowledge_items:
            file.write(json.dumps(item, ensure_ascii=False) + '\n')
    
    logger.info(f"–°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å {len(knowledge_items)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")

def create_enhanced_knowledge_base(source_path, target_path):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑—ã."""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        knowledge_items = []
        with open(source_path, 'r', encoding='utf-8') as file:
            for line in file:
                if line.strip():
                    knowledge_items.append(json.loads(line.strip()))
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        enhanced_items = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –±–∞–∑—ã
        for item in knowledge_items:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            prompt = item.get('prompt', '')
            response = item.get('response', '')
            metadata = item.get('metadata', {})
            
            # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            enhanced_metadata = metadata.copy()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
            difficulty = metadata.get('difficulty', '—Å—Ä–µ–¥–Ω–∏–π')
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            examples = {
                'basic': {
                    'explanation': response.split('.')[0] + '.',
                    'analogy': "–≠—Ç–æ –∫–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ª—é–±—ã–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç—è–º, —á—Ç–æ–±—ã –±–∏–∑–Ω–µ—Å –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª—Å—è",
                    'example': "–ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Å–±–æ–µ –≤ —Ä–∞–±–æ—Ç–µ –ò–¢-—Å–∏—Å—Ç–µ–º –±–∞–Ω–∫–∞ –Ω—É–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç—ã –Ω–µ –ø–æ—Å—Ç—Ä–∞–¥–∞–ª–∏"
                },
                'intermediate': {
                    'explanation': '.'.join(response.split('.')[:2]) + '.',
                    'practical_example': "–ë–∞–Ω–∫ —Å–æ–∑–¥–∞–ª —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –¥–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä –≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ, —á—Ç–æ–±—ã –≤ —Å–ª—É—á–∞–µ –∞–≤–∞—Ä–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–ª–∏ —Ä–∞–±–æ—Ç—É",
                    'important_points': [s.strip() + '.' for s in response.split('.')[:3] if s.strip()]
                },
                'advanced': {
                    'explanation': response,
                    'technical_details': "–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è BCP (Business Continuity Planning) –≤–∫–ª—é—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –±–∏–∑–Ω–µ—Å (BIA), –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–æ–≤, –∞ —Ç–∞–∫–∂–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –∞—É–¥–∏—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.",
                    'case_study': "–í 2021 –≥–æ–¥—É –∫—Ä—É–ø–Ω—ã–π –±–∞–Ω–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–∞–∑–∏–ª –º–∞—Å—à—Ç–∞–±–Ω—É—é –∞—Ç–∞–∫—É —à–∏—Ñ—Ä–æ–≤–∞–ª—å—â–∏–∫–æ–≤ –±–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–∞—â–∏—Ç—ã –∏ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—è–º."
                }
            }
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            enhanced_item = {
                'prompt': prompt,
                'response': response,
                'metadata': enhanced_metadata,
                'examples': examples,
                'related_concepts': []
            }
            
            enhanced_items.append(enhanced_item)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        with open(target_path, 'w', encoding='utf-8') as file:
            for item in enhanced_items:
                file.write(json.dumps(item, ensure_ascii=False) + '\n')
        
        logger.info(f"–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∞: {target_path}")
        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(enhanced_items)}")
        
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
        return False

def check_rag_functionality():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–π RAG."""
    try:
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ RAG...")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é app/knowledge, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs("app/knowledge", exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª __init__.py –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        init_file = "app/knowledge/__init__.py"
        if not os.path.exists(init_file):
            with open(init_file, 'w', encoding='utf-8') as f:
                f.write('"""–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π."""\n')
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª rag_simple.py, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        rag_simple_file = "app/knowledge/rag_simple.py"
        if not os.path.exists(rag_simple_file):
            create_rag_simple_file(rag_simple_file)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø—É—Ç—è–º–∏
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        from app.knowledge.rag_simple import generate_questions, convert_questions_for_db
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤
        questions = generate_questions(
            topic="—Ä–∏—Å–∫_–Ω–∞—Ä—É—à–µ–Ω–∏—è_–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏", 
            difficulty="—Å—Ä–µ–¥–Ω–∏–π", 
            num_questions=1
        )
        
        if questions and len(questions) > 0:
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:")
            logger.info(f"–í–æ–ø—Ä–æ—Å: {questions[0]['question']}")
            logger.info(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {questions[0]['correct_answer']}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_questions = convert_questions_for_db(questions, lesson_id=1)
            
            if db_questions and len(db_questions) > 0:
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤–æ–ø—Ä–æ—Å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                return False
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ RAG: {e}")
        return False

def create_rag_simple_file(file_path):
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª rag_simple.py —Å –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π RAG."""
    code = '''"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RAG (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è).
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LLM.
"""
import json
import random
import os
from typing import List, Dict, Any

# –ü—É—Ç—å –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
RISK_KNOWLEDGE_PATH = "app/knowledge/jsonl/risk_knowledge.jsonl"

def load_knowledge_base(path: str = RISK_KNOWLEDGE_PATH) -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ JSONL —Ñ–∞–π–ª–∞."""
    knowledge_base = []
    try:
        with open(path, 'r', encoding='utf-8') as f:
            for line in f:
                if line.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                    knowledge_base.append(json.loads(line.strip()))
        return knowledge_base
    except FileNotFoundError:
        print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        return []
    except json.JSONDecodeError:
        print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ: {path}")
        return []

def generate_questions(
    topic: str, 
    difficulty: str = "—Å—Ä–µ–¥–Ω–∏–π", 
    num_questions: int = 3
) -> List[Dict[str, Any]]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    knowledge_base = load_knowledge_base()
    if not knowledge_base:
        print("–û—à–∏–±–∫–∞: –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞")
        return []
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –ø–æ —Ç–µ–º–µ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    filtered_kb = [
        item for item in knowledge_base 
        if (
            item.get('metadata', {}).get('topic', '').startswith(topic.split('_')[0]) and 
            item.get('metadata', {}).get('difficulty', '') == difficulty
        )
    ]
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±–∞–∑—ã
    if not filtered_kb:
        filtered_kb = knowledge_base
    
    # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
    questions = []
    selected_items = []
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    if len(filtered_kb) >= num_questions:
        selected_items = random.sample(filtered_kb, num_questions)
    else:
        selected_items = filtered_kb.copy()
        remaining = [item for item in knowledge_base if item not in selected_items]
        if remaining:
            additional_items = random.sample(remaining, min(num_questions - len(selected_items), len(remaining)))
            selected_items.extend(additional_items)
    
    # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    for item in selected_items:
        question_text = item['prompt']
        correct_answer = item['response']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç (–ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
        short_answer = correct_answer.split('.')[0] + '.'
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è –¥—Ä—É–≥–∏–µ –æ—Ç–≤–µ—Ç—ã –∏–∑ –±–∞–∑—ã
        other_answers = [
            kb_item['response'].split('.')[0] + '.' 
            for kb_item in knowledge_base 
            if kb_item['response'] != correct_answer
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        wrong_answers = random.sample(other_answers, min(3, len(other_answers)))
        while len(wrong_answers) < 3:
            wrong_answers.append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        options = [short_answer] + wrong_answers
        random.shuffle(options)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        correct_index = options.index(short_answer)
        correct_letter = chr(65 + correct_index)  # A, B, C –∏–ª–∏ D
        
        question_data = {
            "question": question_text,
            "options": options,
            "correct_answer": correct_letter,
            "explanation": correct_answer
        }
        
        questions.append(question_data)
    
    return questions

def convert_questions_for_db(questions: List[Dict[str, Any]], lesson_id: int) -> List[Dict[str, Any]]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    db_questions = []
    
    for question in questions:
        db_question = {
            "lesson_id": lesson_id,
            "text": question["question"],
            "options": json.dumps(question["options"], ensure_ascii=False),
            "correct_answer": question["correct_answer"],
            "explanation": question.get("explanation", "")
        }
        db_questions.append(db_question)
    
    return db_questions
'''
    
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(code.strip())
    
    logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª rag_simple.py –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ RAG")

def initialize_langchain_integration():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å LangChain."""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é app/langchain, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs("app/langchain", exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª __init__.py –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    init_file = "app/langchain/__init__.py"
    if not os.path.exists(init_file):
        with open(init_file, 'w', encoding='utf-8') as f:
            f.write('"""–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LangGraph –∏ –∞–≥–µ–Ω—Ç–∞–º–∏."""\n')
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª integration.py, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    integration_file = "app/langchain/integration.py"
    if not os.path.exists(integration_file):
        create_integration_file(integration_file)
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª integration.py –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤")
        return True
    else:
        logger.info(f"–§–∞–π–ª integration.py —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True

def create_integration_file(file_path):
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª integration.py —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∞–≥–µ–Ω—Ç–æ–≤."""
    code = '''"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ LangGraph –∞–≥–µ–Ω—Ç–æ–≤ —Å Telegram –±–æ—Ç–æ–º.
"""
import logging
import asyncio
import json
from typing import Dict, Any, List, Optional, Tuple

from app.config import LLM_MODEL_PATH

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class AgentIntegration:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤ LangGraph —Å Telegram –±–æ—Ç–æ–º."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤."""
        # –§–ª–∞–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LLM
        self.llm_available = False
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
        self.knowledge_agent = self.KnowledgeAgentStub()
        self.explanation_agent = self.ExplanationAgentStub()
        self.query_agent = self.QueryAgentStub()
    
    class KnowledgeAgentStub:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ –æ—Ü–µ–Ω–∫–∏ –∑–Ω–∞–Ω–∏–π."""
        def assess(self, question, user_answer, correct_answer):
            """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
            is_correct = user_answer.lower() in correct_answer.lower()
            return {
                "score": 100 if is_correct else 0,
                "explanation": "–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π!" if is_correct else "–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π."
            }
    
    class ExplanationAgentStub:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è."""
        def explain(self, topic, concept, user_level, misconceptions):
            """–û–±—ä—è—Å–Ω—è–µ—Ç –∫–æ–Ω—Ü–µ–ø—Ü–∏—é."""
            return "–≠—Ç–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –±—ã–ª–æ –±—ã –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π, –µ—Å–ª–∏ –±—ã LLM –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω."
    
    class QueryAgentStub:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã."""
        def answer_query(self, query, context):
            """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å."""
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —Å–µ–π—á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —É—Ä–æ–∫–∞."
    
    async def assess_answer(self, question: str, user_answer: str, correct_answer: str) -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é –∞–≥–µ–Ω—Ç–∞ –æ—Ü–µ–Ω–∫–∏ –∑–Ω–∞–Ω–∏–π."""
        if not self.llm_available:
            # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –±–µ–∑ –∞–≥–µ–Ω—Ç–∞
            is_correct = user_answer == correct_answer
            return {
                "score": 100 if is_correct else 0,
                "explanation": "–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π!" if is_correct else "–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π."
            }
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
            assessment = self.knowledge_agent.assess(question, user_answer, correct_answer)
            return assessment
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–æ–º: {e}")
            # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            is_correct = user_answer == correct_answer
            return {
                "score": 100 if is_correct else 0,
                "explanation": "–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π!" if is_correct else "–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π."
            }
    
    async def generate_adaptive_explanation(
        self, 
        topic: str, 
        concept: str, 
        user_level: int, 
        misconceptions: List[str]
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–π."""
        if not self.llm_available:
            # –ü—Ä–æ—Å—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –±–µ–∑ –∞–≥–µ–Ω—Ç–∞
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –µ—â–µ —Ä–∞–∑ –∏–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª —É—Ä–æ–∫–∞."
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            explanation = self.explanation_agent.explain(topic, concept, user_level, misconceptions)
            return explanation
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–º: {e}")
            # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –µ—â–µ —Ä–∞–∑ –∏–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª —É—Ä–æ–∫–∞."
    
    async def answer_user_query(self, query: str, context: str) -> str:
        """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é –∞–≥–µ–Ω—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤."""
        if not self.llm_available:
            # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –±–µ–∑ –∞–≥–µ–Ω—Ç–∞
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —Å–µ–π—á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —É—Ä–æ–∫–∞."
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            answer = self.query_agent.answer_query(query, context)
            return answer
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å –∞–≥–µ–Ω—Ç–æ–º: {e}")
            # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —Å–µ–π—á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —É—Ä–æ–∫–∞."
    
    async def start_learning_session(self, user_id: int, lesson_id: int) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LangGraph."""
        # –í —Ä–µ–∂–∏–º–µ –∑–∞–≥–ª—É—à–∫–∏ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ç–æ–∫
        return {"use_standard_flow": True}

# –°–æ–∑–¥–∞–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤
agent_integration = AgentIntegration()
'''
    
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(code.strip())

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏."""
    try:
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        # –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
        required_packages = [
            "python-telegram-bot",
            "sqlalchemy",
            "python-dotenv"
        ]
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≥–µ–Ω—Ç–∞–º–∏
        agent_packages = [
            "langchain",
            "langchain-community"
        ]
        
        missing_packages = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        for package in required_packages:
            try:
                __import__(package.replace("-", "_"))
                logger.info(f"‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            except ImportError:
                missing_packages.append(package)
                logger.error(f"‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ {package} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
        for package in agent_packages:
            try:
                __import__(package.replace("-", "_"))
                logger.info(f"‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            except ImportError:
                logger.warning(f"‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ {package} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤)")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
        if missing_packages:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {', '.join(missing_packages)}")
            logger.error(f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã: pip install {' '.join(missing_packages)}")
            return False
        
        logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        return False

def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        from app.database.models import get_db, init_db
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_db()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        db = get_db()
        
        if db:
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def check_bot_token():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ Telegram –±–æ—Ç–∞."""
    try:
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ Telegram –±–æ—Ç–∞...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        from app.config import TELEGRAM_TOKEN
        
        if TELEGRAM_TOKEN:
            # –ú–∞—Å–∫–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            masked_token = TELEGRAM_TOKEN[:4] + "*" * (len(TELEGRAM_TOKEN) - 8) + TELEGRAM_TOKEN[-4:]
            logger.info(f"‚úÖ –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω: {masked_token}")
            return True
        else:
            logger.error("‚ùå –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ TELEGRAM_TOKEN")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞ Telegram –±–æ—Ç–∞: {e}")
        return False

def run_checks(args):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é."""
    logger.info("=" * 50)
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤")
    logger.info("=" * 50)
    
    results = {}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if args.check_all or args.check_deps:
        results["dependencies"] = check_requirements()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    if args.check_all or args.check_token:
        results["token"] = check_bot_token()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if args.check_all or args.check_db:
        results["database"] = check_database()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LM Studio
    if args.check_all or args.check_lm_studio:
        results["lm_studio"] = check_lm_studio_connection()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    if args.check_all or args.init_knowledge:
        results["knowledge_base"] = initialize_knowledge_base()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ RAG
    if args.check_all or args.check_rag:
        results["rag"] = check_rag_functionality()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∞–≥–µ–Ω—Ç–∞–º–∏
    if args.check_all or args.init_agents:
        results["integration"] = initialize_langchain_integration()
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("=" * 50)
    logger.info("–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
    logger.info("=" * 50)
    
    for name, result in results.items():
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if result else "‚ùå –û–®–ò–ë–ö–ê"
        logger.info(f"{name}: {status}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    all_success = all(results.values())
    
    if all_success:
        logger.info("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        logger.info("‚úÖ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–≥–µ–Ω—Ç–æ–≤")
        logger.info("üìù –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python -m app.main")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        if "lm_studio" in results and not results["lm_studio"]:
            logger.warning("‚ö†Ô∏è LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤.")
            logger.warning("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å LM Studio –∏ –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞.")
        
        if "dependencies" in results and not results["dependencies"]:
            logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞.")
        
        if "token" in results and not results["token"]:
            logger.error("‚ùå –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")
        
        if "database" in results and not results["database"]:
            logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
    
    return all_success

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞."""
    parser = argparse.ArgumentParser(description="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è Telegram –±–æ—Ç–∞")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser.add_argument("--check-all", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é")
    parser.add_argument("--check-deps", action="store_true", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    parser.add_argument("--check-token", action="store_true", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞")
    parser.add_argument("--check-db", action="store_true", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument("--check-lm-studio", action="store_true", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LM Studio")
    parser.add_argument("--check-rag", action="store_true", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å RAG")
    parser.add_argument("--init-knowledge", action="store_true", help="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
    parser.add_argument("--init-agents", action="store_true", help="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–æ–≤")
    
    args = parser.parse_args()
    
    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if not any(vars(args).values()):
        args.check_all = True
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    success = run_checks(args)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())