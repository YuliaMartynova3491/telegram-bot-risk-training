#!/usr/bin/env python
"""
–ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ.
"""
import os
import shutil
from pathlib import Path

def cleanup_project():
    """–û—á–∏—â–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
    print("üßπ –û–ß–ò–°–¢–ö–ê –ü–†–û–ï–ö–¢–ê")
    print("=" * 50)
    
    # –§–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞)
    files_to_remove = [
        # –°—Ç–∞—Ä—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏  
        "init_agents.py",  # –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
        "init_agents_old.py",
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∏ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
        "debug_init.py",
        "check_env.py", 
        "check_imports.py",
        
        # –°—Ç–∞—Ä—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
        "fix_and_run.sh",
        
        # –õ–æ–≥–∏
        "agents_init.log",
        "bot.log",
        
        # –ö—ç—à Python –≤ –∫–æ—Ä–Ω–µ
        "__pycache__",
        
        # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –≤ app
        "app/learning/questions.py.backup"
    ]
    
    removed_count = 0
    total_size = 0
    
    print("üìã –°–ü–ò–°–û–ö –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø:")
    
    for item in files_to_remove:
        path = Path(item)
        if path.exists():
            try:
                if path.is_file():
                    size = path.stat().st_size
                    print(f"   üìÑ {item} ({size} –±–∞–π—Ç)")
                    total_size += size
                elif path.is_dir():
                    dir_size = sum(f.stat().st_size for f in path.rglob('*') if f.is_file())
                    print(f"   üìÅ {item}/ ({dir_size} –±–∞–π—Ç)")
                    total_size += dir_size
            except:
                print(f"   ‚ùì {item}")
        else:
            print(f"   ‚ö†Ô∏è {item} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
    
    print(f"\nüìä –û–ë–©–ò–ô –†–ê–ó–ú–ï–†: {total_size} –±–∞–π—Ç ({total_size/1024:.1f} KB)")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input(f"\n‚ùì –£–¥–∞–ª–∏—Ç—å —ç—Ç–∏ —Ñ–∞–π–ª—ã? (yes/no): ").lower().strip()
    if response not in ['yes', 'y', '–¥–∞']:
        print("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    print("\nüóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï...")
    
    for item in files_to_remove:
        path = Path(item)
        if path.exists():
            try:
                if path.is_file():
                    path.unlink()
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {item}")
                    removed_count += 1
                elif path.is_dir():
                    shutil.rmtree(path)
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {item}")
                    removed_count += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {item}: {e}")
    
    print(f"\n‚ú® –£–î–ê–õ–ï–ù–û: {removed_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤ –∫–æ—Ä–Ω–µ
    print("\nüìÇ –û–°–¢–ê–í–®–ò–ï–°–Ø –§–ê–ô–õ–´ –í –ö–û–†–ù–ï:")
    root_files = [f for f in Path(".").glob("*") if f.is_file() and not f.name.startswith('.')]
    for file in sorted(root_files):
        size = file.stat().st_size
        print(f"   üìÑ {file.name} ({size} –±–∞–π—Ç)")
    
    print("\nüéâ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("üöÄ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

def show_project_structure():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞."""
    print("\nüìã –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê:")
    print("=" * 30)
    
    important_items = [
        ("üìÑ init_agents_final.py", "–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI-–∞–≥–µ–Ω—Ç–æ–≤"),
        ("üìÑ requirements.txt", "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python"),
        ("üìÑ .env", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (—Ç–æ–∫–µ–Ω—ã)"), 
        ("üìÑ README.md", "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"),
        ("üìÅ app/", "–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞"),
        ("üìÅ app/bot/", "Telegram bot handlers"),
        ("üìÅ app/database/", "–†–∞–±–æ—Ç–∞ —Å –ë–î"),
        ("üìÅ app/langchain/", "AI –∞–≥–µ–Ω—Ç—ã"),
        ("üìÅ app/knowledge/", "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"),
        ("üìÅ app/learning/", "–õ–æ–≥–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è"),
        ("üìÑ risk_training.db", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite")
    ]
    
    for item, description in important_items:
        print(f"   {item:<25} - {description}")
    
    print("\n‚úÖ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
    print("   ü§ñ Telegram Bot —Å AI –∞–≥–µ–Ω—Ç–∞–º–∏")
    print("   üß† LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (qwen2.5-14b-instruct)")
    print("   üìö –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º")
    print("   üíæ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    cleanup_project()
    show_project_structure()
    
    print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì:")
    print("   python -m app.main")
    print("   (–∑–∞–ø—É—Å–∫ AI-–±–æ—Ç–∞)")