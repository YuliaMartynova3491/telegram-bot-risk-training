"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ Enhanced AI Learning Bot.
–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π AI-–∞–≥–µ–Ω—Ç–æ–≤ –∏ RAG.
"""
import logging
import sys
import os
import asyncio
import traceback
import signal
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from telegram import Update

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging(level: str = "INFO"):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    log_level = getattr(logging, level.upper(), logging.INFO)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    os.makedirs("logs", exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    formatter = logging.Formatter(
        "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞
    file_handler = logging.FileHandler("logs/bot.log", encoding='utf-8')
    file_handler.setFormatter(formatter)
    file_handler.setLevel(log_level)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    console_handler.setLevel(log_level)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    logging.basicConfig(
        level=log_level,
        handlers=[file_handler, console_handler]
    )
    
    return logging.getLogger(__name__)

class EnhancedBot:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã–º –±–æ—Ç–æ–º."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞."""
        self.logger = setup_logging()
        self.application: Optional[Application] = None
        self.enhanced_system_available = False
        self.rag_available = False
        self.agents_available = False
        
    async def initialize_systems(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –±–æ—Ç–∞."""
        try:
            self.logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Enhanced AI Learning Bot...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            success = await self._check_configuration()
            if not success:
                return False
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            success = await self._initialize_database()
            if not success:
                return False
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            await self._initialize_enhanced_systems()
            
            # –°–æ–∑–¥–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            success = await self._create_telegram_application()
            if not success:
                return False
            
            self.logger.info("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            self.logger.error(traceback.format_exc())
            return False
    
    async def _check_configuration(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        try:
            from app.config import TELEGRAM_TOKEN, DATABASE_URL
            
            if not TELEGRAM_TOKEN:
                self.logger.error("‚ùå TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                self.logger.error("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
                return False
            
            if len(TELEGRAM_TOKEN) < 20:
                self.logger.error("‚ùå TELEGRAM_TOKEN –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return False
            
            self.logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            self.logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_URL}")
            
            return True
            
        except ImportError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    async def _initialize_database(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        try:
            from app.database.models import init_db
            from app.learning.courses import init_courses
            from app.learning.lessons import init_lessons
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            init_db()
            self.logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—É—Ä—Å—ã
            courses = init_courses()
            self.logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(courses)} –∫—É—Ä—Å–æ–≤")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—Å–∞
            for course in courses:
                lessons = init_lessons(course.id)
                self.logger.info(f"‚úÖ –ö—É—Ä—Å '{course.name}': {len(lessons)} —É—Ä–æ–∫–æ–≤")
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    async def _initialize_enhanced_systems(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)."""
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è
        try:
            from app.core.enhanced_integration import initialize_enhanced_system
            
            self.logger.info("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è...")
            self.enhanced_system_available = await initialize_enhanced_system()
            
            if self.enhanced_system_available:
                self.logger.info("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å RAG
                try:
                    from app.knowledge.rag_advanced import rag_system
                    self.rag_available = rag_system.is_initialized
                    if self.rag_available:
                        self.logger.info("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞")
                    else:
                        self.logger.warning("‚ö†Ô∏è RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                except ImportError:
                    self.logger.warning("‚ö†Ô∏è RAG –º–æ–¥—É–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–æ–≤
                try:
                    from app.langchain.enhanced_agents import enhanced_agent_system
                    self.agents_available = enhanced_agent_system.is_available
                    if self.agents_available:
                        self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞")
                    else:
                        self.logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
                except ImportError:
                    self.logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª–∏ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                self.logger.warning("‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                
        except ImportError:
            self.logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            self.logger.info("‚ÑπÔ∏è –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º: {e}")
    
    async def _create_telegram_application(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        try:
            from app.config import TELEGRAM_TOKEN
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = Application.builder().token(TELEGRAM_TOKEN).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            self.application.add_error_handler(self._error_handler)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            await self._setup_handlers()
            
            self.logger.info("‚úÖ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            return False
    
    async def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        try:
            if self.enhanced_system_available:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                from app.bot.enhanced_handlers import (
                    enhanced_start,
                    enhanced_handle_message,
                    enhanced_handle_callback
                )
                
                self.application.add_handler(CommandHandler("start", enhanced_start))
                self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, enhanced_handle_message))
                self.application.add_handler(CallbackQueryHandler(enhanced_handle_callback))
                
                self.logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω—ã —É–ª—É—á—à–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                from app.bot.handlers import start, handle_message, handle_callback
                
                self.application.add_handler(CommandHandler("start", start))
                self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
                self.application.add_handler(CallbackQueryHandler(handle_callback))
                
                self.logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏")
            
        except ImportError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            # Fallback –∫ –±–∞–∑–æ–≤—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
            from app.bot.handlers import start, handle_message, handle_callback
            
            self.application.add_handler(CommandHandler("start", start))
            self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
            self.application.add_handler(CallbackQueryHandler(handle_callback))
            
            self.logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω—ã fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏")
    
    async def _error_handler(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
        try:
            error = context.error
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update}")
            self.logger.error(f"–û—à–∏–±–∫–∞: {error}")
            self.logger.error("".join(traceback.format_tb(error.__traceback__)))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if update and update.effective_chat:
                try:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text="üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    )
                except Exception:
                    self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Enhanced AI Learning Bot...")
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
            self._log_system_status()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
            self._setup_signal_handlers()
            
            # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.logger.info("üì° –ù–∞—á–∏–Ω–∞—é polling...")
            await self.application.run_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            self.logger.error(traceback.format_exc())
            raise
    
    def _log_system_status(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º."""
        self.logger.info("=" * 60)
        self.logger.info("üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú")
        self.logger.info("=" * 60)
        self.logger.info(f"ü§ñ Enhanced Learning System: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if self.enhanced_system_available else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}")
        self.logger.info(f"üß† RAG System: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if self.rag_available else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}")
        self.logger.info(f"üë• AI Agents: {'‚úÖ –ê–∫—Ç–∏–≤–Ω—ã' if self.agents_available else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}")
        self.logger.info("=" * 60)
        
        if not self.enhanced_system_available:
            self.logger.info("‚ÑπÔ∏è –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:")
            self.logger.info("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install sentence-transformers faiss-cpu langchain")
            self.logger.info("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ LM Studio —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é")
            self.logger.info("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é: python init_enhanced_system.py")
    
    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤."""
        def signal_handler(signum, frame):
            self.logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            if self.application:
                asyncio.create_task(self.application.stop())
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞."""
        try:
            self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            
            if self.application:
                await self.application.stop()
                
            self.logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞."""
    bot = EnhancedBot()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
        success = await bot.initialize_systems()
        if not success:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: python init_enhanced_system.py")
            return 1
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await bot.start()
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        return 1
    finally:
        await bot.stop()
    
    return 0

if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        sys.exit(0)