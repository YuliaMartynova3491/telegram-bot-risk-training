"""
–ú–æ–¥—É–ª—å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –¥–ª—è –±–æ—Ç–∞.
"""
import logging
import json
import asyncio
from typing import Dict, Any, List, Optional, Tuple, Union

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from app.bot.stickers import (
    send_correct_answer_sticker,
    send_wrong_answer_sticker,
    send_lesson_success_sticker,
    send_lesson_fail_sticker,
    send_topic_success_sticker
)
from app.database.models import get_db
from app.database.operations import (
    get_or_create_user,
    get_question,
    get_lesson,
    get_next_lesson
)
from app.learning.questions import (
    check_answer,
    get_explanation
)
from app.bot.keyboards import get_progress_bar

logger = logging.getLogger(__name__)

async def handle_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE, question_id: int, answer_letter: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π."""
    query = update.callback_query
    user = query.from_user
    chat_id = query.message.chat_id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    db_user = get_or_create_user(
        db,
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        is_correct = check_answer(question_id, db_user.id, answer_letter)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        explanation = get_explanation(question_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –∫ –∫–∞–∫–æ–º—É —É—Ä–æ–∫—É –æ–Ω –æ—Ç–Ω–æ—Å–∏—Ç—Å—è
        question = get_question(db, question_id)
        
        if not question:
            logger.error(f"–í–æ–ø—Ä–æ—Å —Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        lesson_id = question.lesson_id
        context.user_data.setdefault('lesson_data', {})
        context.user_data['lesson_data'].setdefault(lesson_id, {
            'current_question': 0,
            'questions': [],
            'correct_answers': 0,
            'wrong_answers_streak': 0
        })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
        if is_correct:
            context.user_data['lesson_data'][lesson_id]['correct_answers'] = context.user_data['lesson_data'][lesson_id].get('correct_answers', 0) + 1
            context.user_data['lesson_data'][lesson_id]['wrong_answers_streak'] = 0
        else:
            context.user_data['lesson_data'][lesson_id]['wrong_answers_streak'] = context.user_data['lesson_data'][lesson_id].get('wrong_answers_streak', 0) + 1
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if is_correct:
            if context.user_data['lesson_data'][lesson_id].get('correct_answers', 0) == 1:
                await send_correct_answer_sticker(context, chat_id, is_first=True)
            else:
                await send_correct_answer_sticker(context, chat_id, is_first=False)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –Ω–∞ –∞–±–∑–∞—Ü—ã –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            explanation_paragraphs = explanation.replace(". ", ".\n").split("\n")
            formatted_explanation = "\n".join(explanation_paragraphs)
            
            result_message = (
                "‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!*\n\n"
                f"{formatted_explanation}\n\n"
                "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É..."
            )
        else:
            if context.user_data['lesson_data'][lesson_id].get('wrong_answers_streak', 0) == 1:
                await send_wrong_answer_sticker(context, chat_id, is_first=True)
            else:
                await send_wrong_answer_sticker(context, chat_id, is_first=False)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –Ω–∞ –∞–±–∑–∞—Ü—ã –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            explanation_paragraphs = explanation.replace(". ", ".\n").split("\n")
            formatted_explanation = "\n".join(explanation_paragraphs)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            try:
                options = json.loads(question.options)
                correct_index = ord(question.correct_answer) - ord('A')
                correct_option = options[correct_index] if 0 <= correct_index < len(options) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"
                
                result_message = (
                    "‚ùå *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç*\n\n"
                    f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{question.correct_answer}*\n"
                    f"{correct_option}\n\n"
                    f"{formatted_explanation}\n\n"
                    "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É..."
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: {e}")
                result_message = (
                    "‚ùå *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç*\n\n"
                    f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{question.correct_answer}*\n\n"
                    f"{formatted_explanation}\n\n"
                    "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É..."
                )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await query.message.edit_text(
            result_message,
            parse_mode="Markdown"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —É—Ä–æ–∫–∞
        from app.learning.questions import get_questions_by_lesson
        all_questions = get_questions_by_lesson(db, lesson_id)
        question_ids = [q.id for q in all_questions]
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        current_idx = question_ids.index(question_id) if question_id in question_ids else -1
        next_idx = current_idx + 1
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º
        await asyncio.sleep(2)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if next_idx < len(question_ids):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            from app.bot.keyboards import get_question_options_keyboard
            next_question = get_question(db, question_ids[next_idx])
            
            message = (
                f"‚ùì *–í–æ–ø—Ä–æ—Å {next_idx + 1} –∏–∑ {len(question_ids)}*\n\n"
                f"{next_question.text}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:"
            )
            
            keyboard = get_question_options_keyboard(next_question)
            
            await query.message.edit_text(
                message,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            from app.learning.questions import check_lesson_completion
            
            completion_data = check_lesson_completion(db_user.id, lesson_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫ –∏ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
            lesson = get_lesson(db, lesson_id)
            next_lesson = get_next_lesson(db, lesson_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ –ø—Ä–æ–π–¥–µ–Ω —Ç–µ—Å—Ç
            is_successful = completion_data["is_successful"]
            success_percentage = completion_data["success_percentage"]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            progress_bar = get_progress_bar(success_percentage)
            
            if is_successful:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞
                await send_lesson_success_sticker(context, chat_id)
                
                result_message = (
                    f"üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —É—Ä–æ–∫ \"{lesson.title}\".\n\n"
                    f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {context.user_data['lesson_data'][lesson_id].get('correct_answers', 0)} –∏–∑ {len(question_ids)} "
                    f"({success_percentage:.1f}%)\n\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤."
                )
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫ –≤ —Ç–µ–º–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–º—ã
                if not next_lesson or next_lesson.course_id != lesson.course_id:
                    await send_topic_success_sticker(context, chat_id)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞
                await send_lesson_fail_sticker(context, chat_id)
                
                result_message = (
                    f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –ø–æ —É—Ä–æ–∫—É \"{lesson.title}\":\n\n"
                    f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {context.user_data['lesson_data'][lesson_id].get('correct_answers', 0)} –∏–∑ {len(question_ids)} "
                    f"–≤–æ–ø—Ä–æ—Å–æ–≤ ({success_percentage:.1f}%)\n\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}\n\n"
                    "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–±—Ä–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 80%.\n"
                    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑."
                )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = []
            
            if is_successful and next_lesson:
                keyboard.append([
                    InlineKeyboardButton("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫", callback_data=f"lesson_{next_lesson.id}")
                ])
            
            keyboard.append([
                InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ —É—Ä–æ–∫ –∑–∞–Ω–æ–≤–æ", callback_data=f"lesson_{lesson_id}")
            ])
            
            keyboard.append([
                InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤", callback_data=f"course_{lesson.course_id}")
            ])
            
            keyboard.append([
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            await query.message.edit_text(
                result_message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
            if lesson_id in context.user_data.get('lesson_data', {}):
                del context.user_data['lesson_data'][lesson_id]
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {e}")
        import traceback
        logger.error(traceback.format_exc())
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")