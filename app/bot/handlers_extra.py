"""
–ú–æ–¥—É–ª—å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –¥–ª—è –±–æ—Ç–∞.
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤–æ–ø—Ä–æ—Å–æ–≤.
"""
import logging
import json
import asyncio
from typing import Dict, Any, List, Optional, Tuple, Union

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from app.bot.stickers import (
    send_correct_answer_sticker,
    send_wrong_answer_sticker,
    send_lesson_success_sticker,
    send_lesson_fail_sticker,
    send_topic_success_sticker
)
from app.database.models import get_db
from app.database.operations import (
    get_or_create_user,
    get_question,
    get_lesson,
    get_next_lesson,
    update_user_progress
)
from app.learning.questions import (
    check_answer,
    get_explanation,
    get_questions_by_lesson
)
from app.bot.keyboards import (
    get_progress_bar,
    get_wrong_answer_keyboard,
    get_question_options_keyboard
)
from app.config import MIN_SUCCESS_PERCENTAGE

logger = logging.getLogger(__name__)

def format_question_with_options(question_text: str, options: list) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        question_text: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        options: –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    """
    formatted = f"‚ùì **{question_text}**\n\n"
    
    letters = ['A', 'B', 'C', 'D', 'E', 'F']  # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ 4 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    
    for i, option in enumerate(options):
        if i < len(letters):
            formatted += f"**{letters[i]}.** {option}\n\n"
    
    return formatted.rstrip()  # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã

def create_answer_keyboard(question_id: int, num_options: int):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤.
    
    Args:
        question_id: ID –≤–æ–ø—Ä–æ—Å–∞
        num_options: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    """
    letters = ['A', 'B', 'C', 'D', 'E', 'F']
    buttons = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    for i in range(min(num_options, len(letters))):
        button = InlineKeyboardButton(
            text=f"üîò {letters[i]}",
            callback_data=f"answer_{question_id}_{letters[i]}"
        )
        buttons.append([button])
    
    return InlineKeyboardMarkup(buttons)

async def handle_answer_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, question_id: int, answer_letter: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    query = update.callback_query
    user = query.from_user
    chat_id = query.message.chat_id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    db_user = get_or_create_user(
        db,
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        question = get_question(db, question_id)
        if not question:
            logger.error(f"–í–æ–ø—Ä–æ—Å —Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        if isinstance(question.options, str):
            try:
                options = json.loads(question.options)
            except:
                options = [opt.strip() for opt in question.options.split('\n') if opt.strip()]
        else:
            options = question.options
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        option_index = ord(answer_letter) - ord('A')
        if 0 <= option_index < len(options):
            selected_option = options[option_index]
        else:
            selected_option = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        message_text = f"–í—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç: **{answer_letter}.** {selected_option}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –≤ —á–∞—Ç
        sent_message = await context.bot.send_message(
            chat_id=chat_id,
            text=message_text,
            parse_mode="Markdown"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–≤–µ—Ç–æ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        context.user_data.setdefault('answer_messages', []).append(sent_message.message_id)
        
        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        await check_answer_and_respond(update, context, question_id, answer_letter)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def check_answer_and_respond(update: Update, context: ContextTypes.DEFAULT_TYPE, question_id: int, answer_letter: str) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç."""
    query = update.callback_query
    user = query.from_user
    chat_id = query.message.chat_id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    db_user = get_or_create_user(
        db,
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        is_correct = check_answer(question_id, db_user.id, answer_letter)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        explanation = get_explanation(question_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –∫ –∫–∞–∫–æ–º—É —É—Ä–æ–∫—É –æ–Ω –æ—Ç–Ω–æ—Å–∏—Ç—Å—è
        question = get_question(db, question_id)
        
        if not question:
            logger.error(f"–í–æ–ø—Ä–æ—Å —Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
        lesson_id = question.lesson_id
        lesson = get_lesson(db, lesson_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data.setdefault('lesson_data', {})
        context.user_data['lesson_data'].setdefault(lesson_id, {
            'current_question': 0,
            'correct_answers': 0,
            'wrong_answers_streak': 0
        })
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞
        all_questions = get_questions_by_lesson(db, lesson_id)
        question_ids = [q.id for q in all_questions]
        current_idx = question_ids.index(question_id) if question_id in question_ids else 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
        if is_correct:
            context.user_data['lesson_data'][lesson_id]['correct_answers'] = context.user_data['lesson_data'][lesson_id].get('correct_answers', 0) + 1
            context.user_data['lesson_data'][lesson_id]['wrong_answers_streak'] = 0
        else:
            context.user_data['lesson_data'][lesson_id]['wrong_answers_streak'] = context.user_data['lesson_data'][lesson_id].get('wrong_answers_streak', 0) + 1
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        if isinstance(question.options, str):
            try:
                options = json.loads(question.options)
            except:
                options = [opt.strip() for opt in question.options.split('\n') if opt.strip()]
        else:
            options = question.options
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if is_correct:
            if context.user_data['lesson_data'][lesson_id].get('correct_answers', 0) == 1:
                await send_correct_answer_sticker(context, chat_id, is_first=True)
            else:
                await send_correct_answer_sticker(context, chat_id, is_first=False)
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            correct_letter = question.correct_answer
            correct_index = ord(correct_letter) - ord('A')
            correct_option = options[correct_index] if 0 <= correct_index < len(options) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            explanation_formatted = format_explanation(explanation)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
            result_message = (
                "‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω–æ!**\n\n"
                f"**–û—Ç–≤–µ—Ç {correct_letter}:** {correct_option}\n\n"
                f"**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {explanation_formatted}"
            )
            
            await context.bot.send_message(
                chat_id=chat_id,
                text=result_message,
                parse_mode="Markdown"
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            next_idx = current_idx + 1
            if next_idx < len(question_ids):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
                keyboard = [[InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next_question")]]
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É?",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                context.user_data['next_question_id'] = question_ids[next_idx]
                context.user_data['lesson_id'] = lesson_id
            else:
                # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                await show_lesson_results(update, context, lesson_id)
                
        else:
            # –î–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
            if context.user_data['lesson_data'][lesson_id].get('wrong_answers_streak', 0) == 1:
                await send_wrong_answer_sticker(context, chat_id, is_first=True)
            else:
                await send_wrong_answer_sticker(context, chat_id, is_first=False)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            explanation_formatted = format_explanation(explanation)
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            correct_letter = question.correct_answer
            correct_index = ord(correct_letter) - ord('A')
            correct_option = options[correct_index] if 0 <= correct_index < len(options) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
            result_message = (
                "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ**\n\n"
                f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_letter}.** {correct_option}\n\n"
                f"**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {explanation_formatted}"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"retry_question_{question_id}")],
                [InlineKeyboardButton("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data=f"next_question_{lesson_id}")]
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            await context.bot.send_message(
                chat_id=chat_id,
                text=result_message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE, lesson_id: int = None, question_id: int = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    # –ï—Å–ª–∏ —ç—Ç–æ callback query, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–µ–≥–æ
    if update.callback_query:
        query = update.callback_query
        chat_id = query.message.chat_id
        user = query.from_user
    else:
        chat_id = update.effective_chat.id
        user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    db_user = get_or_create_user(
        db,
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # –ï—Å–ª–∏ question_id –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if question_id is None:
        question_id = context.user_data.get('next_question_id')
        lesson_id = context.user_data.get('lesson_id', lesson_id)
    
    # –ï—Å–ª–∏ question_id –≤—Å–µ –µ—â–µ None, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —É—Ä–æ–∫–∞
    if question_id is None and lesson_id:
        questions = get_questions_by_lesson(db, lesson_id)
        if not questions:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Ä–æ–∫–∞, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
            await context.bot.send_message(
                chat_id=chat_id,
                text="–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞."
            )
            return
        question_id = questions[0].id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    question = get_question(db, question_id)
    if not question:
        await context.bot.send_message(
            chat_id=chat_id,
            text="–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å."
        )
        return
    
    # –ï—Å–ª–∏ lesson_id –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
    if lesson_id is None:
        lesson_id = question.lesson_id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
    questions = get_questions_by_lesson(db, lesson_id)
    question_ids = [q.id for q in questions]
    current_idx = question_ids.index(question_id) if question_id in question_ids else 0
    question_number = current_idx + 1
    total_questions = len(questions)
    
    # –ü–∞—Ä—Å–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    if isinstance(question.options, str):
        try:
            options = json.loads(question.options)
        except:
            options = [opt.strip() for opt in question.options.split('\n') if opt.strip()]
    else:
        options = question.options
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    progress_text = f"üìä –í–æ–ø—Ä–æ—Å {question_number} –∏–∑ {total_questions}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    difficulty_map = {
        "–ª–µ–≥–∫–∏–π": "‚≠ê",
        "—Å—Ä–µ–¥–Ω–∏–π": "‚≠ê‚≠ê", 
        "—Å–ª–æ–∂–Ω—ã–π": "‚≠ê‚≠ê‚≠ê"
    }
    difficulty = getattr(question, 'difficulty', '—Å—Ä–µ–¥–Ω–∏–π')
    difficulty_indicator = difficulty_map.get(difficulty, "‚≠ê‚≠ê")
    difficulty_text = f"{difficulty_indicator} **–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {difficulty}\n\n"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    question_text = format_question_with_options(question.text, options)
    
    full_text = f"{progress_text}{difficulty_text}{question_text}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = create_answer_keyboard(question.id, len(options))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    if update.callback_query:
        await update.callback_query.message.edit_text(
            full_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=full_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

async def handle_retry_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑'."""
    query = update.callback_query
    chat_id = query.message.chat_id
    
    # –ü–æ–ª—É—á–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ callback_data
    question_id = int(query.data.replace("retry_question_", ""))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ
    db = get_db()
    question = get_question(db, question_id)
    if not question:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å.")
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
    await send_question(update, context, question.lesson_id, question_id)

async def handle_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å' –∏–ª–∏ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'."""
    query = update.callback_query
    chat_id = query.message.chat_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø callback_data
    if query.data == "next_question":
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        question_id = context.user_data.get('next_question_id')
        lesson_id = context.user_data.get('lesson_id')
        
        if question_id and lesson_id:
            await send_question(update, context, lesson_id, question_id)
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('next_question_id', None)
        else:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.")
        return
    
    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data
    if query.data.startswith("next_question_"):
        lesson_id = int(query.data.replace("next_question_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —É—Ä–æ–∫–∞
        db = get_db()
        questions = get_questions_by_lesson(db, lesson_id)
        question_ids = [q.id for q in questions]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞
        current_idx = context.user_data.get('lesson_data', {}).get(lesson_id, {}).get('current_question', 0)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        next_idx = current_idx + 1
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        if next_idx < len(question_ids):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            if lesson_id in context.user_data.get('lesson_data', {}):
                context.user_data['lesson_data'][lesson_id]['current_question'] = next_idx
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            await send_question(update, context, lesson_id, question_ids[next_idx])
        else:
            # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await show_lesson_results(update, context, lesson_id)

async def show_lesson_results(update: Update, context: ContextTypes.DEFAULT_TYPE, lesson_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Ä–æ–∫–∞."""
    # –ï—Å–ª–∏ —ç—Ç–æ callback query, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–µ–≥–æ
    if update.callback_query:
        query = update.callback_query
        chat_id = query.message.chat_id
        user = query.from_user
    else:
        chat_id = update.effective_chat.id
        user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    db_user = get_or_create_user(
        db,
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫ –∏ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
    lesson = get_lesson(db, lesson_id)
    next_lesson = get_next_lesson(db, lesson_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —É—Ä–æ–∫–∞
    questions = get_questions_by_lesson(db, lesson_id)
    total_questions = len(questions)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    correct_answers = context.user_data.get('lesson_data', {}).get(lesson_id, {}).get('correct_answers', 0)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    if total_questions > 0:
        success_percentage = (correct_answers / total_questions) * 100.0
    else:
        success_percentage = 0.0
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ –ø—Ä–æ–π–¥–µ–Ω —É—Ä–æ–∫
    is_successful = success_percentage >= MIN_SUCCESS_PERCENTAGE
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_user_progress(db, db_user.id, lesson_id, is_successful, success_percentage)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_bar = get_progress_bar(success_percentage)
    
    if is_successful:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞
        await send_lesson_success_sticker(context, chat_id)
        
        result_message = (
            f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —É—Ä–æ–∫ \"{lesson.title}\".\n\n"
            f"**–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:** {correct_answers} –∏–∑ {total_questions} "
            f"({success_percentage:.1f}%)\n\n"
            f"**–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress_bar}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤."
        )
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫ –≤ —Ç–µ–º–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–º—ã
        if not next_lesson or next_lesson.course_id != lesson.course_id:
            await send_topic_success_sticker(context, chat_id)
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞
        await send_lesson_fail_sticker(context, chat_id)
        
        result_message = (
            f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –ø–æ —É—Ä–æ–∫—É** \"{lesson.title}\":\n\n"
            f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {correct_answers} –∏–∑ {total_questions} "
            f"–≤–æ–ø—Ä–æ—Å–æ–≤ ({success_percentage:.1f}%)\n\n"
            f"**–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress_bar}\n\n"
            f"–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–±—Ä–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ {MIN_SUCCESS_PERCENTAGE}%.\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑."
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = []
    
    if is_successful and next_lesson:
        keyboard.append([
            InlineKeyboardButton("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫", callback_data=f"lesson_{next_lesson.id}")
        ])
    
    keyboard.append([
        InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ —É—Ä–æ–∫ –∑–∞–Ω–æ–≤–æ", callback_data=f"lesson_{lesson_id}")
    ])
    
    keyboard.append([
        InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤", callback_data=f"course_{lesson.course_id}")
    ])
    
    keyboard.append([
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    await context.bot.send_message(
        chat_id=chat_id,
        text=result_message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
    if lesson_id in context.user_data.get('lesson_data', {}):
        del context.user_data['lesson_data'][lesson_id]

def format_explanation(explanation: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏."""
    if not explanation:
        return "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –ø–æ –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫
    paragraphs = explanation.split('\n\n')
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    formatted_paragraphs = []
    for paragraph in paragraphs:
        if not paragraph.strip():
            continue
            
        sentences = paragraph.split('. ')
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ 2-3 –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        formatted_paragraph = ''
        for i in range(0, len(sentences), 2):
            group = sentences[i:i+2]
            formatted_paragraph += '. '.join(group)
            if i + 2 < len(sentences):
                formatted_paragraph += '.\n'
            elif not group[-1].endswith('.'):
                formatted_paragraph += '.'
        
        formatted_paragraphs.append(formatted_paragraph)
    
    # –°–æ–µ–¥–∏–Ω—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Å –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫
    return '\n\n'.join(formatted_paragraphs)