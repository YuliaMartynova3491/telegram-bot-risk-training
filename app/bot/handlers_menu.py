"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–∫–∞–º.
"""
import logging
from typing import Dict, Any, List, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from app.database.models import get_db
from app.database.operations import (
    get_or_create_user,
    update_user_activity,
    get_all_courses,
    get_course,
    get_lessons_by_course,
    get_user_progress,
    get_available_lessons,
    get_course_progress
)
from app.bot.keyboards import (
    get_courses_keyboard,
    get_lessons_keyboard,
    get_available_lessons_keyboard,
    get_progress_bar
)

logger = logging.getLogger(__name__)

async def show_lessons(update: Update, context: ContextTypes.DEFAULT_TYPE, course_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ —Ç–µ–º—ã."""
    query = update.callback_query
    user = query.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    db_user = get_or_create_user(
        db,
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –∏ —É—Ä–æ–∫–∏
    course = get_course(db, course_id)
    lessons = get_lessons_by_course(db, course_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É—Ä–æ–∫–æ–≤
    available_lessons_data = get_available_lessons(db, db_user.id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É—Ä–æ–∫–∏ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
    available_lessons_current_course = [
        lesson_data for lesson_data in available_lessons_data
        if lesson_data["course"].id == course_id
    ]
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –ø–µ—Ä–≤–æ–π —Ç–µ–º—ã –¥–æ—Å—Ç—É–ø–Ω—ã–º
    if course_id == 1 and available_lessons_current_course:
        available_lessons_current_course[0]["is_available"] = True
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É—Ä–æ–∫–æ–≤
    available = [lesson_data["is_available"] for lesson_data in available_lessons_current_course]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üìò *{course.name}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫:"
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.message.edit_text(
        message,
        reply_markup=get_lessons_keyboard(lessons, available),
        parse_mode="Markdown"
    )

async def show_progress(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if update.callback_query:
        query = update.callback_query
        chat_id = query.message.chat_id
        user = query.from_user
        message_obj = query.message
    else:
        chat_id = update.effective_chat.id
        user = update.effective_user
        message_obj = None
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    db_user = get_or_create_user(
        db,
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏
    available_lessons_data = get_available_lessons(db, db_user.id)
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –ø–µ—Ä–≤–æ–π —Ç–µ–º—ã –¥–æ—Å—Ç—É–ø–Ω—ã–º
    if available_lessons_data:
        for lesson_data in available_lessons_data:
            if lesson_data["course"].id == 1 and lesson_data["lesson"].order == 1:
                lesson_data["is_available"] = True
                break
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not available_lessons_data:
        message = "üìä *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è*\n\n–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –æ–±—É—á–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ!"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìö –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="course_1")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        message = "üìä *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è*\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞–º
        courses = get_all_courses(db)
        for course in courses:
            course_progress = get_course_progress(db, db_user.id, course.id)
            message += f"üìò *{course.name}*: {get_progress_bar(course_progress)}\n\n"
        
        message += "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è:"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —É—Ä–æ–∫–∞–º–∏
        keyboard = get_available_lessons_keyboard(available_lessons_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message_obj:
        await message_obj.edit_text(
            message,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=message,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )