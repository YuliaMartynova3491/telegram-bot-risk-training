"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram –±–æ—Ç–∞.
"""
import logging
import json
import random
import asyncio
from typing import Dict, Any, List, Optional, Tuple, Union

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)

from app.config import TELEGRAM_TOKEN, START_COMMANDS, MIN_SUCCESS_PERCENTAGE
from app.database.models import get_db, init_db
from app.database.operations import (
    get_or_create_user,
    update_user_activity,
    get_all_courses,
    get_course,
    get_lessons_by_course,
    get_lesson,
    get_next_lesson,
    get_available_lessons,
    get_user_progress,
    get_or_create_user_progress,
    update_user_progress,
    calculate_lesson_success_percentage,
    get_course_progress,
    get_question
)
from app.bot.keyboards import (
    get_main_menu_keyboard,
    get_courses_keyboard,
    get_lessons_keyboard,
    get_question_options_keyboard,
    get_continue_keyboard,
    get_available_lessons_keyboard,
    get_progress_bar
)
from app.bot.stickers import (
    send_welcome_sticker,
    send_correct_answer_sticker,
    send_wrong_answer_sticker,
    send_lesson_success_sticker,
    send_topic_success_sticker,
    send_lesson_fail_sticker
)
from app.learning.courses import init_courses
from app.learning.lessons import init_lessons
from app.learning.questions import (
    generate_questions_for_lesson,
    get_options_for_question,
    check_answer,
    get_explanation,
    check_lesson_completion,
    get_correct_answers_count
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –¥–∞–Ω–Ω—ã—Ö
def init_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –¥–∞–Ω–Ω—ã–µ."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—ã
    courses = init_courses()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
    for course in courses:
        init_lessons(course.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    chat_id = update.effective_chat.id
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    db_user = get_or_create_user(
        db,
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    update_user_activity(db, db_user.id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä
    await send_welcome_sticker(context, chat_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.\n\n"
        "–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –∏–∑—É—á–∏—Ç—å:\n"
        "üìå –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è —Ä–∏—Å–∫–æ–≤ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏\n"
        "üìå –ú–µ—Ç–æ–¥—ã –æ—Ü–µ–Ω–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n"
        "üìå –ü–æ–¥—Ö–æ–¥—ã –∫ –æ—Ü–µ–Ω–∫–µ –∏ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∏—Å–∫–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:"
    )
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=welcome_message,
        reply_markup=get_main_menu_keyboard()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    chat_id = update.effective_chat.id
    user = update.effective_user
    message_text = update.message.text.lower()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    db_user = get_or_create_user(
        db,
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    update_user_activity(db, db_user.id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∑–∞–ø—É—Å–∫–∞
    if message_text in [cmd.lower() for cmd in START_COMMANDS]:
        await start(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
    if message_text == "üìö –æ–±—É—á–µ–Ω–∏–µ":
        courses = get_all_courses(db)
        await context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
            reply_markup=get_courses_keyboard(courses)
        )
    
    elif message_text == "üìä –º–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å":
        await show_progress(update, context)
    
    elif message_text == "‚ÑπÔ∏è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
        instructions = (
            "üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º**\n\n"
            "1Ô∏è‚É£ **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—É—á–µ–Ω–∏—è**:\n"
            "   ‚Ä¢ –û–±—É—á–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ —Ç–µ–º—ã\n"
            "   ‚Ä¢ –ö–∞–∂–¥–∞—è —Ç–µ–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–∫–æ–≤\n"
            "   ‚Ä¢ –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞ –≤—ã –æ—Ç–≤–µ—Ç–∏—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n\n"
            
            "2Ô∏è‚É£ **–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤**:\n"
            "   ‚Ä¢ –£—Ä–æ–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ\n"
            "   ‚Ä¢ –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 80% –≤–æ–ø—Ä–æ—Å–æ–≤\n"
            "   ‚Ä¢ –£—Ä–æ–∫ –º–æ–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ\n\n"
            
            "3Ô∏è‚É£ **–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã**:\n"
            "   ‚Ä¢ –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞\n"
            "   ‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞\n"
            "   ‚Ä¢ –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ\n\n"
            
            "4Ô∏è‚É£ **–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è**:\n"
            "   ‚Ä¢ –í —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å' –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏\n"
            "   ‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏\n\n"
            
            "–ñ–µ–ª–∞–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è! üöÄ"
        )
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=instructions,
            parse_mode="Markdown"
        )
    
    else:
        # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        await context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    user = query.from_user
    chat_id = query.message.chat_id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    db_user = get_or_create_user(
        db,
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    update_user_activity(db, db_user.id)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback data
    callback_data = query.data
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback –∑–∞–ø—Ä–æ—Å–∞
    await query.answer()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
    if callback_data.startswith("course_"):
        course_id = int(callback_data.replace("course_", ""))
        await show_lessons(update, context, course_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–∞
    elif callback_data.startswith("lesson_"):
        if callback_data == "lesson_locked":
            await query.message.reply_text(
                "üîí –≠—Ç–æ—Ç —É—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É—Ä–æ–∫–∏."
            )
        else:
            lesson_id = int(callback_data.replace("lesson_", ""))
            await show_lesson(update, context, lesson_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
    elif callback_data.startswith("start_test_"):
        lesson_id = int(callback_data.replace("start_test_", ""))
        await start_test(update, context, lesson_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
    elif callback_data.startswith("answer_"):
        parts = callback_data.split("_")
        question_id = int(parts[1])
        answer = parts[2]
        await process_question_answer(update, context, question_id, answer)
    
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é —Ç–µ–º
    elif callback_data == "back_to_courses":
        courses = get_all_courses(db)
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
            reply_markup=get_courses_keyboard(courses)
        )
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif callback_data == "back_to_main":
        await query.message.delete()
        await context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    elif callback_data == "progress":
        await show_progress(update, context)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–µ
    elif callback_data.startswith("course_info_"):
        course_id = int(callback_data.replace("course_info_", ""))
        course = get_course(db, course_id)
        await query.message.reply_text(
            f"‚ÑπÔ∏è *{course.name}*\n\n{course.description}",
            parse_mode="Markdown"
        )

async def show_lessons(update: Update, context: ContextTypes.DEFAULT_TYPE, course_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ —Ç–µ–º—ã."""
    query = update.callback_query
    user = query.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    db_user = get_or_create_user(
        db,
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –∏ —É—Ä–æ–∫–∏
    course = get_course(db, course_id)
    lessons = get_lessons_by_course(db, course_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É—Ä–æ–∫–æ–≤
    available_lessons_data = get_available_lessons(db, db_user.id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É—Ä–æ–∫–∏ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
    available_lessons_current_course = [
        lesson_data for lesson_data in available_lessons_data
        if lesson_data["course"].id == course_id
    ]
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É—Ä–æ–∫–æ–≤
    available = [lesson_data["is_available"] for lesson_data in available_lessons_current_course]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üìò *{course.name}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫:"
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.message.edit_text(
        message,
        reply_markup=get_lessons_keyboard(lessons, available),
        parse_mode="Markdown"
    )

async def show_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE, lesson_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É—Ä–æ–∫–∞."""
    query = update.callback_query
    user = query.from_user
    chat_id = query.message.chat_id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    db_user = get_or_create_user(
        db,
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫
    lesson = get_lesson(db, lesson_id)
    
    if not lesson:
        await query.message.reply_text("‚ö†Ô∏è –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É—Ä–æ–∫—É
    progress = get_or_create_user_progress(db, db_user.id, lesson_id)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.message.delete()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É—Ä–æ–∫–∞
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"üìù *{lesson.title}*\n\n{lesson.content}",
        parse_mode="Markdown"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç
    await context.bot.send_message(
        chat_id=chat_id,
        text="–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è. –ì–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data=f"start_test_{lesson_id}")]
        ])
    )

async def start_test(update: Update, context: ContextTypes.DEFAULT_TYPE, lesson_id: int) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É—Ä–æ–∫—É."""
    query = update.callback_query
    user = query.from_user
    chat_id = query.message.chat_id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    db_user = get_or_create_user(
        db,
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫
    lesson = get_lesson(db, lesson_id)
    course = get_course(db, lesson.course_id)
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É—Ä–æ–∫—É
    progress = get_or_create_user_progress(db, db_user.id, lesson_id)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —É—Ä–æ–∫–∞
    topic = course.name.lower().replace(" ", "_")
    questions = generate_questions_for_lesson(lesson_id, topic)
    
    if not questions:
        await query.message.edit_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['current_question'] = 0
    context.user_data['questions'] = [q.id for q in questions]
    context.user_data['lesson_id'] = lesson_id
    context.user_data['correct_answers'] = 0
    context.user_data['wrong_answers_streak'] = 0
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_question(update, context)

async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    query = update.callback_query
    chat_id = query.message.chat_id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    current_question_index = context.user_data.get('current_question', 0)
    questions = context.user_data.get('questions', [])
    
    if current_question_index >= len(questions):
        # –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await show_test_results(update, context)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    question_id = questions[current_question_index]
    question = get_question(db, question_id)
    
    if not question:
        await query.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    question_number = current_question_index + 1
    total_questions = len(questions)
    
    message = (
        f"‚ùì *–í–æ–ø—Ä–æ—Å {question_number} –∏–∑ {total_questions}*\n\n"
        f"{question.text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = get_question_options_keyboard(question)
    
    if query.message:
        await query.message.edit_text(
            message,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=message,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

async def process_question_answer(update: Update, context: ContextTypes.DEFAULT_TYPE, question_id: int, answer: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å."""
    query = update.callback_query
    user = query.from_user
    chat_id = query.message.chat_id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    db_user = get_or_create_user(
        db,
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    is_correct = check_answer(question_id, db_user.id, answer)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    if is_correct:
        context.user_data['correct_answers'] = context.user_data.get('correct_answers', 0) + 1
        context.user_data['wrong_answers_streak'] = 0
    else:
        context.user_data['wrong_answers_streak'] = context.user_data.get('wrong_answers_streak', 0) + 1
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    explanation = get_explanation(question_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    if is_correct:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
        if context.user_data.get('correct_answers', 0) == 1:
            await send_correct_answer_sticker(context, chat_id, is_first=True)
        else:
            await send_correct_answer_sticker(context, chat_id, is_first=False)
        
        result_message = (
            "‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!*\n\n"
            f"{explanation}\n\n"
            "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É..."
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
        if context.user_data.get('wrong_answers_streak', 0) == 1:
            await send_wrong_answer_sticker(context, chat_id, is_first=True)
        else:
            await send_wrong_answer_sticker(context, chat_id, is_first=False)
        
        result_message = (
            "‚ùå *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ*\n\n"
            f"{explanation}\n\n"
            "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É..."
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    await query.message.edit_text(
        result_message,
        parse_mode="Markdown"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    context.user_data['current_question'] = context.user_data.get('current_question', 0) + 1
    
    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º
    await asyncio.sleep(2)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await send_question(update, context)

async def show_test_results(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    query = update.callback_query
    user = query.from_user
    chat_id = query.message.chat_id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    db_user = get_or_create_user(
        db,
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
    lesson_id = context.user_data.get('lesson_id')
    correct_answers = context.user_data.get('correct_answers', 0)
    total_questions = len(context.user_data.get('questions', []))
    
    if total_questions == 0:
        await query.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    success_percentage = (correct_answers / total_questions) * 100.0
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_user_progress(db, db_user.id, lesson_id, True, success_percentage)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ –ø—Ä–æ–π–¥–µ–Ω —Ç–µ—Å—Ç
    is_successful = success_percentage >= MIN_SUCCESS_PERCENTAGE
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫ –∏ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
    lesson = get_lesson(db, lesson_id)
    next_lesson = get_next_lesson(db, lesson_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    if is_successful:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞
        await send_lesson_success_sticker(context, chat_id)
        
        result_message = (
            f"üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —É—Ä–æ–∫ \"{lesson.title}\".\n\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {correct_answers} –∏–∑ {total_questions} ({success_percentage:.1f}%)\n\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {get_progress_bar(success_percentage)}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤."
        )
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫ –≤ —Ç–µ–º–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–º—ã
        if not next_lesson or next_lesson.course_id != lesson.course_id:
            await send_topic_success_sticker(context, chat_id)
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞
        await send_lesson_fail_sticker(context, chat_id)
        
        result_message = (
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –ø–æ —É—Ä–æ–∫—É \"{lesson.title}\":\n\n"
            f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {correct_answers} –∏–∑ {total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤ ({success_percentage:.1f}%)\n\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {get_progress_bar(success_percentage)}\n\n"
            f"–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–±—Ä–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ {MIN_SUCCESS_PERCENTAGE}%.\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑."
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = []
    
    if is_successful and next_lesson:
        keyboard.append([
            InlineKeyboardButton("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫", callback_data=f"lesson_{next_lesson.id}")
        ])
    
    keyboard.append([
        InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ —É—Ä–æ–∫ –∑–∞–Ω–æ–≤–æ", callback_data=f"lesson_{lesson_id}")
    ])
    
    keyboard.append([
        InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤", callback_data=f"course_{lesson.course_id}")
    ])
    
    keyboard.append([
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    await query.message.edit_text(
        result_message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
    context.user_data.pop('current_question', None)
    context.user_data.pop('questions', None)
    context.user_data.pop('lesson_id', None)
    context.user_data.pop('correct_answers', None)
    context.user_data.pop('wrong_answers_streak', None)

async def show_progress(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if update.callback_query:
        query = update.callback_query
        chat_id = query.message.chat_id
        user = query.from_user
        message_obj = query.message
    else:
        chat_id = update.effective_chat.id
        user = update.effective_user
        message_obj = None
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    db_user = get_or_create_user(
        db,
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏
    available_lessons_data = get_available_lessons(db, db_user.id)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not available_lessons_data:
        message = "üìä *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è*\n\n–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –æ–±—É—á–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ!"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìö –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="course_1")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        message = "üìä *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è*\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞–º
        courses = get_all_courses(db)
        for course in courses:
            course_progress = get_course_progress(db, db_user.id, course.id)
            message += f"üìò *{course.name}*: {get_progress_bar(course_progress)}\n\n"
        
        message += "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è:"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —É—Ä–æ–∫–∞–º–∏
        keyboard = get_available_lessons_keyboard(available_lessons_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message_obj:
        await message_obj.edit_text(
            message,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=message,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    init_data()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)