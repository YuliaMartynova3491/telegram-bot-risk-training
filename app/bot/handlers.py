"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram –±–æ—Ç–∞.
–§–∏–Ω–∞–ª—å–Ω–∞—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è.
"""
import logging
import json
import asyncio
from typing import Dict, Any, List, Optional, Tuple, Union

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)

from app.config import TELEGRAM_TOKEN, START_COMMANDS, MIN_SUCCESS_PERCENTAGE
from app.database.models import get_db, init_db
from app.database.operations import (
    get_or_create_user,
    update_user_activity,
    get_all_courses,
    get_course,
    get_lessons_by_course,
    get_lesson,
    get_lesson_by_id,
    get_next_lesson,
    get_available_lessons,
    get_user_progress,
    get_or_create_user_progress,
    update_user_progress,
    calculate_lesson_success_percentage,
    get_questions_by_lesson,
    get_question_by_id
)
from app.bot.keyboards import (
    get_main_menu_keyboard,
    get_courses_keyboard,
    get_lessons_keyboard,
    get_question_options_keyboard,
    get_continue_keyboard,
    get_available_lessons_keyboard,
    get_progress_bar,
    get_start_test_keyboard
)
from app.bot.stickers import (
    send_welcome_sticker,
    send_correct_answer_sticker,
    send_wrong_answer_sticker,
    send_lesson_success_sticker,
    send_topic_success_sticker,
    send_lesson_fail_sticker
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –¥–∞–Ω–Ω—ã—Ö
def init_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –¥–∞–Ω–Ω—ã–µ."""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_db()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—ã
        from app.learning.courses import init_courses
        courses = init_courses()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
        from app.learning.lessons import init_lessons
        for course in courses:
            init_lessons(course.id)
            
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        logger.error(traceback.format_exc())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    chat_id = update.effective_chat.id
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    db_user = get_or_create_user(
        db,
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    update_user_activity(db, db_user.id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä
    try:
        await send_welcome_sticker(context, chat_id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.\n\n"
        "–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –∏–∑—É—á–∏—Ç—å:\n"
        "üìå –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è —Ä–∏—Å–∫–æ–≤ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏\n"
        "üìå –ú–µ—Ç–æ–¥—ã –æ—Ü–µ–Ω–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n"
        "üìå –ü–æ–¥—Ö–æ–¥—ã –∫ –æ—Ü–µ–Ω–∫–µ –∏ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∏—Å–∫–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:"
    )
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=welcome_message,
        reply_markup=get_main_menu_keyboard()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    chat_id = update.effective_chat.id
    user = update.effective_user
    message_text = update.message.text.lower()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    db_user = get_or_create_user(
        db,
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    update_user_activity(db, db_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if context.user_data.get('waiting_for_question', False):
        # –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            lesson_id = context.user_data.get('question_lesson_id')
            if lesson_id:
                lesson = get_lesson(db, lesson_id)
                lesson_title = lesson.title if lesson else "—É—Ä–æ–∫"
            else:
                lesson_title = "—É—Ä–æ–∫"
            
            # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
            answer_message = (
                f"ü§î –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ '{lesson_title}'!\n\n"
                f"**–í–∞—à –≤–æ–ø—Ä–æ—Å:** {update.message.text}\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. "
                "–†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —É—Ä–æ–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ü–µ—Ä–µ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞\n"
                "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∫ –≤–æ–ø—Ä–æ—Å–∞–º —Ç–µ—Å—Ç–∞\n"
                "‚Ä¢ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞"
            )
            
            await update.message.reply_text(
                answer_message,
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìñ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É—Ä–æ–∫—É", callback_data=f"lesson_{lesson_id}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
            context.user_data['waiting_for_question'] = False
            context.user_data.pop('question_lesson_id', None)
            return
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            context.user_data['waiting_for_question'] = False
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∑–∞–ø—É—Å–∫–∞
    if message_text in [cmd.lower() for cmd in START_COMMANDS]:
        await start(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
    if message_text == "üìö –æ–±—É—á–µ–Ω–∏–µ":
        courses = get_all_courses(db)
        await context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
            reply_markup=get_courses_keyboard(courses)
        )
    
    elif message_text == "üìä –º–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å":
        from app.bot.handlers_menu import show_progress
        await show_progress(update, context)
    
    elif message_text == "‚ÑπÔ∏è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
        instructions = (
            "üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º**\n\n"
            "1Ô∏è‚É£ **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—É—á–µ–Ω–∏—è**:\n"
            "   ‚Ä¢ –û–±—É—á–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ —Ç–µ–º—ã\n"
            "   ‚Ä¢ –ö–∞–∂–¥–∞—è —Ç–µ–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–∫–æ–≤\n"
            "   ‚Ä¢ –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞ –≤—ã –æ—Ç–≤–µ—Ç–∏—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n\n"
            
            "2Ô∏è‚É£ **–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤**:\n"
            "   ‚Ä¢ –£—Ä–æ–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ\n"
            "   ‚Ä¢ –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 80% –≤–æ–ø—Ä–æ—Å–æ–≤\n"
            "   ‚Ä¢ –£—Ä–æ–∫ –º–æ–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ\n\n"
            
            "3Ô∏è‚É£ **–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã**:\n"
            "   ‚Ä¢ –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞\n"
            "   ‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞\n"
            "   ‚Ä¢ –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ\n"
            "   ‚Ä¢ –ü—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è\n\n"
            
            "4Ô∏è‚É£ **–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏**:\n"
            "   ‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É —É—Ä–æ–∫–∞\n"
            "   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –≤–∞—à–µ–º—É —É—Ä–æ–≤–Ω—é –∑–Ω–∞–Ω–∏–π\n"
            "   ‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏\n\n"
            
            "5Ô∏è‚É£ **–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è**:\n"
            "   ‚Ä¢ –í —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å' –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏\n"
            "   ‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏\n\n"
            
            "–ñ–µ–ª–∞–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è! üöÄ"
        )
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=instructions,
            parse_mode="Markdown"
        )
    
    else:
        # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        await context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    user = query.from_user
    
    # –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ callback –¥–∞–Ω–Ω—ã–µ
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        await query.answer()
        
        # –ü–∞—Ä—Å–∏–º callback data
        if query.data == "main_menu" or query.data == "back_to_main":
            await show_main_menu(update, context)
        elif query.data == "courses":
            await show_courses(update, context)
        elif query.data.startswith("course_"):
            course_id = int(query.data.replace("course_", ""))
            await show_course_lessons(update, context, course_id)
        elif query.data.startswith("lesson_"):
            lesson_id = int(query.data.replace("lesson_", ""))
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å —É—Ä–æ–∫ {lesson_id}")
            await show_lesson_content(update, context, lesson_id)
                
        elif query.data.startswith("start_test_"):
            lesson_id = int(query.data.replace("start_test_", ""))
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –¥–ª—è —É—Ä–æ–∫–∞ {lesson_id}")
            await start_lesson_test(update, context, lesson_id)
                
        elif query.data.startswith("ask_question_"):
            lesson_id = int(query.data.replace("ask_question_", ""))
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —É—Ä–æ–∫—É {lesson_id}")
            await handle_user_question(update, context, lesson_id)
                
        elif query.data.startswith("answer_"):
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: answer_questionId_letter
            parts = query.data.split("_")
            if len(parts) >= 3:
                question_id = int(parts[1])
                answer_letter = parts[2]
                logger.info(f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {question_id}: {answer_letter}")
                await handle_answer_selection(update, context, question_id, answer_letter)
            else:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞: {query.data}")
                
        elif query.data == "next_question":
            logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É")
            await handle_next_question(update, context)
            
        elif query.data.startswith("next_question_"):
            lesson_id = int(query.data.replace("next_question_", ""))
            await handle_next_question_in_lesson(update, context, lesson_id)
            
        elif query.data.startswith("retry_question_"):
            question_id = int(query.data.replace("retry_question_", ""))
            await retry_question(update, context, question_id)
            
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {query.data}")
            await query.message.edit_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
        import traceback
        logger.error(traceback.format_exc())
        try:
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    user = query.from_user
    
    welcome_message = (
        f"üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await query.message.edit_text(
        welcome_message,
        parse_mode="Markdown",
        reply_markup=get_main_menu_keyboard()
    )

async def show_courses(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤."""
    query = update.callback_query
    
    db = get_db()
    courses = get_all_courses(db)
    
    await query.message.edit_text(
        "üìö **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:**",
        parse_mode="Markdown",
        reply_markup=get_courses_keyboard(courses)
    )

async def show_course_lessons(update: Update, context: ContextTypes.DEFAULT_TYPE, course_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –∫—É—Ä—Å–∞."""
    query = update.callback_query
    user = query.from_user
    
    db = get_db()
    db_user = get_or_create_user(
        db,
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    course = get_course(db, course_id)
    lessons = get_lessons_by_course(db, course_id)
    
    if not lessons:
        await query.message.edit_text(
            "‚ùå –£—Ä–æ–∫–∏ –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö —Ç–µ–º–∞–º", callback_data="courses")]
            ])
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Ä–æ–∫–∞–º–∏
    keyboard = []
    for lesson in lessons:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É—Ä–æ–∫—É
        progress = get_user_progress(db, db_user.id, lesson.id)
        
        if progress and progress.is_completed:
            status = "‚úÖ"
        else:
            status = "üìù"
        
        keyboard.append([
            InlineKeyboardButton(
                f"{status} {lesson.title}",
                callback_data=f"lesson_{lesson.id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("üîô –ö —Ç–µ–º–∞–º", callback_data="courses")])
    
    message_text = f"üìñ **{course.name}**\n\n{course.description}\n\n**–£—Ä–æ–∫–∏:**"
    
    await query.message.edit_text(
        message_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_lesson_content(update: Update, context: ContextTypes.DEFAULT_TYPE, lesson_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É—Ä–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π."""
    query = update.callback_query
    user = query.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Ä–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    db_user = get_or_create_user(
        db,
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    lesson = get_lesson(db, lesson_id)
    
    if not lesson:
        await query.message.edit_text(
            "‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —É—Ä–æ–∫–∞
    try:
        await query.message.delete()
    except:
        pass
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    content = lesson.content
    max_length = 4000
    
    if len(content) <= max_length:
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"üìù **{lesson.title}**\n\n{content}",
            parse_mode="Markdown"
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"üìù **{lesson.title}**",
            parse_mode="Markdown"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞—Å—Ç—è–º–∏
        chunks = [content[i:i+max_length] for i in range(0, len(content), max_length)]
        for chunk in chunks:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=chunk,
                parse_mode="Markdown"
            )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è. –ì–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data=f"start_test_{lesson_id}")],
            [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —É—Ä–æ–∫—É", callback_data=f"ask_question_{lesson_id}")],
            [InlineKeyboardButton("üìã –ö —É—Ä–æ–∫–∞–º", callback_data=f"course_{lesson.course_id}")]
        ])
    )

async def handle_user_question(update: Update, context: ContextTypes.DEFAULT_TYPE, lesson_id: int) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —É—Ä–æ–∫—É."""
    query = update.callback_query
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    context.user_data['waiting_for_question'] = True
    context.user_data['question_lesson_id'] = lesson_id
    
    await query.message.edit_text(
        "‚ùì **–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —É—Ä–æ–∫—É**\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É —É—Ä–æ–∫–∞, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ç–µ—Ä–º–∏–Ω '—É–≥—Ä–æ–∑–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏'?\n"
        "‚Ä¢ –ö–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤?\n"
        "‚Ä¢ –ö–∞–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏?\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"lesson_{lesson_id}")]
        ])
    )

async def start_lesson_test(update: Update, context: ContextTypes.DEFAULT_TYPE, lesson_id: int) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –ø–æ —É—Ä–æ–∫—É."""
    query = update.callback_query
    user = query.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Ä–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    db_user = get_or_create_user(
        db,
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    lesson = get_lesson(db, lesson_id)
    if not lesson:
        await query.message.edit_text("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —É—Ä–æ–∫–∞
    questions = get_questions_by_lesson(db, lesson_id)
    
    if not questions:
        # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        try:
            from app.learning.questions import generate_questions_for_lesson
            course = get_course(db, lesson.course_id)
            topic = course.name.lower().replace(" ", "_") if course else "risk_management"
            questions = generate_questions_for_lesson(lesson_id, topic)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            questions = []
    
    if not questions:
        await query.message.edit_text(
            f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è —É—Ä–æ–∫–∞ '{lesson.title}' –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —É—Ä–æ–∫ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö —É—Ä–æ–∫—É", callback_data=f"lesson_{lesson_id}")]
            ])
        )
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['current_test'] = {
        'lesson_id': lesson_id,
        'questions': [q.id for q in questions],
        'current_question_index': 0,
        'correct_answers': 0,
        'total_questions': len(questions)
    }
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_question(update, context, questions[0].id)

async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE, question_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    query = update.callback_query
    chat_id = query.message.chat_id
    
    db = get_db()
    question = get_question_by_id(db, question_id)
    
    if not question:
        await query.message.edit_text("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
    test_data = context.user_data.get('current_test', {})
    current_index = test_data.get('current_question_index', 0)
    total_questions = test_data.get('total_questions', 1)
    
    # –ü–∞—Ä—Å–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    if isinstance(question.options, str):
        try:
            options = json.loads(question.options)
        except:
            options = [opt.strip() for opt in question.options.split('\n') if opt.strip()]
    else:
        options = question.options
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    question_number = current_index + 1
    progress_text = f"üìä –í–æ–ø—Ä–æ—Å {question_number} –∏–∑ {total_questions}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    difficulty_map = {
        "–ª–µ–≥–∫–∏–π": "‚≠ê",
        "—Å—Ä–µ–¥–Ω–∏–π": "‚≠ê‚≠ê", 
        "—Å–ª–æ–∂–Ω—ã–π": "‚≠ê‚≠ê‚≠ê"
    }
    difficulty = getattr(question, 'difficulty', '—Å—Ä–µ–¥–Ω–∏–π')
    difficulty_indicator = difficulty_map.get(difficulty, "‚≠ê‚≠ê")
    difficulty_text = f"{difficulty_indicator} **–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {difficulty}\n\n"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    question_text = f"‚ùì **{question.text}**\n\n"
    
    letters = ['A', 'B', 'C', 'D', 'E', 'F']
    for i, option in enumerate(options):
        if i < len(letters):
            question_text += f"**{letters[i]}.** {option}\n\n"
    
    full_text = f"{progress_text}{difficulty_text}{question_text.rstrip()}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = []
    for i in range(min(len(options), len(letters))):
        button = InlineKeyboardButton(
            text=f"üîò {letters[i]}",
            callback_data=f"answer_{question_id}_{letters[i]}"
        )
        keyboard.append([button])
    
    await query.message.edit_text(
        full_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_answer_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, question_id: int, answer_letter: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    query = update.callback_query
    user = query.from_user
    chat_id = query.message.chat_id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    db_user = get_or_create_user(
        db,
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    try:
        from app.learning.questions import check_answer, get_explanation
        is_correct = check_answer(question_id, db_user.id, answer_letter)
        explanation = get_explanation(question_id)
    except ImportError:
        # –†–µ–∑–µ—Ä–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞
        question = get_question_by_id(db, question_id)
        is_correct = question.correct_answer == answer_letter if question else False
        explanation = question.explanation if question else "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    question = get_question_by_id(db, question_id)
    
    if isinstance(question.options, str):
        try:
            options = json.loads(question.options)
        except:
            options = [opt.strip() for opt in question.options.split('\n') if opt.strip()]
    else:
        options = question.options
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    test_data = context.user_data.get('current_test', {})
    if is_correct:
        test_data['correct_answers'] = test_data.get('correct_answers', 0) + 1
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º
    correct_index = ord(question.correct_answer) - ord('A')
    correct_option_text = options[correct_index] if 0 <= correct_index < len(options) else ""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
    try:
        if is_correct:
            await send_correct_answer_sticker(context, chat_id, is_first=test_data.get('correct_answers', 0) == 1)
        else:
            await send_wrong_answer_sticker(context, chat_id, is_first=True)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä: {e}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    if is_correct:
        result_message = (
            "‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω–æ!**\n\n"
            f"**–û—Ç–≤–µ—Ç {question.correct_answer}:** {correct_option_text}\n\n"
            f"**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {explanation}"
        )
    else:
        result_message = (
            "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ**\n\n"
            f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question.correct_answer}.** {correct_option_text}\n\n"
            f"**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {explanation}"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await query.message.edit_text(
        result_message,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next_question")]
        ])
    )

async def handle_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
    test_data = context.user_data.get('current_test', {})
    
    if not test_data:
        await update.callback_query.message.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    current_index = test_data.get('current_question_index', 0)
    questions = test_data.get('questions', [])
    
    next_index = current_index + 1
    
    if next_index < len(questions):
        # –ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π
        test_data['current_question_index'] = next_index
        context.user_data['current_test'] = test_data
        
        next_question_id = questions[next_index]
        await send_question(update, context, next_question_id)
    else:
        # –í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await show_test_results(update, context)

async def handle_next_question_in_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE, lesson_id: int) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ —É—Ä–æ–∫–µ."""
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
    await handle_next_question(update, context)

async def retry_question(update: Update, context: ContextTypes.DEFAULT_TYPE, question_id: int) -> None:
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–æ–ø—Ä–æ—Å."""
    await send_question(update, context, question_id)

async def show_test_results(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    query = update.callback_query
    user = query.from_user
    chat_id = query.message.chat_id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    db_user = get_or_create_user(
        db,
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
    test_data = context.user_data.get('current_test', {})
    lesson_id = test_data.get('lesson_id')
    correct_answers = test_data.get('correct_answers', 0)
    total_questions = test_data.get('total_questions', 0)
    
    if total_questions == 0:
        await query.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    success_percentage = (correct_answers / total_questions) * 100.0
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_successful = success_percentage >= MIN_SUCCESS_PERCENTAGE
    update_user_progress(db, db_user.id, lesson_id, is_successful, success_percentage)
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫ –∏ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
    lesson = get_lesson(db, lesson_id)
    next_lesson = get_next_lesson(db, lesson_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    try:
        if is_successful:
            await send_lesson_success_sticker(context, chat_id)
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫ –≤ —Ç–µ–º–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–º—ã
            if not next_lesson or (hasattr(next_lesson, 'course_id') and next_lesson.course_id != lesson.course_id):
                await send_topic_success_sticker(context, chat_id)
        else:
            await send_lesson_fail_sticker(context, chat_id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä: {e}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    progress_bar = get_progress_bar(success_percentage)
    
    if is_successful:
        result_message = (
            f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —É—Ä–æ–∫ \"{lesson.title}\".\n\n"
            f"**–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:** {correct_answers} –∏–∑ {total_questions} "
            f"({success_percentage:.1f}%)\n\n"
            f"**–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress_bar}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤."
        )
    else:
        result_message = (
            f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –ø–æ —É—Ä–æ–∫—É** \"{lesson.title}\":\n\n"
            f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {correct_answers} –∏–∑ {total_questions} "
            f"–≤–æ–ø—Ä–æ—Å–æ–≤ ({success_percentage:.1f}%)\n\n"
            f"**–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress_bar}\n\n"
            f"–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–±—Ä–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ {MIN_SUCCESS_PERCENTAGE}%.\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑."
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = []
    
    if is_successful and next_lesson:
        keyboard.append([
            InlineKeyboardButton("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫", callback_data=f"lesson_{next_lesson.id}")
        ])
    
    keyboard.append([
        InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ —É—Ä–æ–∫ –∑–∞–Ω–æ–≤–æ", callback_data=f"lesson_{lesson_id}")
    ])
    
    keyboard.append([
        InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤", callback_data=f"course_{lesson.course_id}")
    ])
    
    keyboard.append([
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    await query.message.edit_text(
        result_message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
    context.user_data.pop('current_test', None)

def run_bot(error_handler=None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞."""
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    init_data()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if error_handler:
        application.add_error_handler(error_handler)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    from telegram import Update
    application.run_polling(allowed_updates=Update.ALL_TYPES)