"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ –º–µ–Ω—é –≤ Telegram.
"""
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    keyboard = [
        [KeyboardButton("üìö –û–±—É—á–µ–Ω–∏–µ")],
        [KeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ú–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è
def get_courses_keyboard(courses):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è."""
    keyboard = []
    for course in courses:
        keyboard.append([InlineKeyboardButton(
            f"üìò {course.name}", 
            callback_data=f"course_{course.id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    return InlineKeyboardMarkup(keyboard)

def get_lessons_keyboard(lessons, available_lessons=None):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Ä–æ–∫–∞–º–∏ —Ç–µ–º—ã."""
    keyboard = []
    
    if available_lessons is None:
        # –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–º, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
        available_lessons = [i == 0 for i in range(len(lessons))]
    
    for lesson, is_available in zip(lessons, available_lessons):
        status_emoji = "üîì" if is_available else "üîí"
        callback_data = f"lesson_{lesson.id}" if is_available else "lesson_locked"
        
        keyboard.append([InlineKeyboardButton(
            f"{status_emoji} {lesson.title}", 
            callback_data=callback_data
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ö —Ç–µ–º–∞–º", callback_data="back_to_courses")])
    
    return InlineKeyboardMarkup(keyboard)

def get_available_lessons_keyboard(available_lessons_data):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —É—Ä–æ–∫–∞–º–∏."""
    keyboard = []
    
    current_course_id = None
    
    for lesson_data in available_lessons_data:
        lesson = lesson_data["lesson"]
        course = lesson_data["course"]
        is_available = lesson_data["is_available"]
        progress = lesson_data["progress"]
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –ø–µ—Ä–≤–æ–π —Ç–µ–º—ã –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–º
        if course.order == 1 and lesson.order == 1:
            is_available = True
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–º—ã, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ —Ç–µ–º—ã
        if current_course_id != course.id:
            keyboard.append([InlineKeyboardButton(
                f"üìò {course.name}", 
                callback_data=f"course_info_{course.id}"
            )])
            current_course_id = course.id
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —É—Ä–æ–∫–∞
        status_emoji = "‚úÖ" if progress and progress.is_completed else "üîì" if is_available else "üîí"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback_data
        if progress and progress.is_completed:
            callback_data = f"lesson_{lesson.id}"  # –ú–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π —É—Ä–æ–∫
        elif is_available:
            callback_data = f"lesson_{lesson.id}"
        else:
            callback_data = "lesson_locked"
        
        keyboard.append([InlineKeyboardButton(
            f"{status_emoji} {lesson.title}", 
            callback_data=callback_data
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    return InlineKeyboardMarkup(keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
def get_question_options_keyboard(question):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å."""
    import json
    
    keyboard = []
    options = json.loads(question.options)
    
    for i, option in enumerate(options):
        keyboard.append([InlineKeyboardButton(
            f"{chr(65+i)}. {option}", 
            callback_data=f"answer_{question.id}_{chr(65+i)}"
        )])
    
    return InlineKeyboardMarkup(keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
def get_start_test_keyboard(lesson_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data=f"start_test_{lesson_id}")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
def get_continue_keyboard(next_lesson_id=None):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è."""
    keyboard = []
    
    if next_lesson_id:
        keyboard.append([InlineKeyboardButton(
            "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", 
            callback_data=f"lesson_{next_lesson_id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress")])
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
    
    return InlineKeyboardMarkup(keyboard)

# –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
def get_progress_bar(percentage, width=10):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä."""
    filled = int(width * percentage / 100)
    bar = "‚ñ†" * filled + "‚ñ°" * (width - filled)
    return f"{bar} {percentage:.1f}%"