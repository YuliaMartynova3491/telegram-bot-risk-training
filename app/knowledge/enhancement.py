"""
Функция для создания расширенной базы знаний для агентов.
"""
import json
import os
import random
from typing import List, Dict, Any

def create_enhanced_knowledge_base(
    source_path: str = "app/knowledge/jsonl/risk_knowledge.jsonl",
    target_path: str = "app/knowledge/jsonl/enhanced_risk_knowledge.jsonl"
) -> None:
    """
    Создает расширенную базу знаний на основе существующей базы.
    
    Расширенная база знаний содержит:
    - Дополнительные метаданные для агентов
    - Примеры для разных уровней сложности
    - Связи между понятиями
    """
    # Создаем директорию, если её нет
    os.makedirs(os.path.dirname(target_path), exist_ok=True)
    
    # Загружаем существующую базу знаний
    knowledge_items = []
    try:
        with open(source_path, 'r', encoding='utf-8') as file:
            for line in file:
                if line.strip():
                    knowledge_items.append(json.loads(line.strip()))
    except FileNotFoundError:
        print(f"Файл не найден: {source_path}")
        return
    
    # Создаем расширенную базу знаний
    enhanced_items = []
    
    # Создаем связи между понятиями
    topics_map = {}
    for item in knowledge_items:
        topic = item.get('metadata', {}).get('topic', '')
        if topic:
            if topic not in topics_map:
                topics_map[topic] = []
            topics_map[topic].append(item)
    
    # Обрабатываем каждый элемент из исходной базы
    for item in knowledge_items:
        # Получаем базовые данные
        prompt = item.get('prompt', '')
        response = item.get('response', '')
        metadata = item.get('metadata', {})
        
        # Создаем дополнительные метаданные
        enhanced_metadata = metadata.copy()
        
        # Добавляем уровни сложности для объяснений
        difficulty = metadata.get('difficulty', 'средний')
        
        # Создаем примеры для разных уровней сложности
        examples = {
            'basic': create_basic_example(prompt, response),
            'intermediate': create_intermediate_example(prompt, response),
            'advanced': create_advanced_example(prompt, response)
        }
        
        # Добавляем связи с другими понятиями
        topic = metadata.get('topic', '')
        related_items = []
        if topic in topics_map:
            # Выбираем до 3 связанных элементов из той же темы
            related_items = [
                {'prompt': item.get('prompt', ''), 'topic': item.get('metadata', {}).get('topic', '')}
                for item in topics_map[topic]
                if item.get('prompt', '') != prompt
            ][:3]
        
        # Создаем расширенный элемент
        enhanced_item = {
            'prompt': prompt,
            'response': response,
            'metadata': enhanced_metadata,
            'examples': examples,
            'related_concepts': related_items
        }
        
        enhanced_items.append(enhanced_item)
    
    # Сохраняем расширенную базу знаний
    with open(target_path, 'w', encoding='utf-8') as file:
        for item in enhanced_items:
            file.write(json.dumps(item, ensure_ascii=False) + '\n')
    
    print(f"Расширенная база знаний создана: {target_path}")
    print(f"Количество элементов: {len(enhanced_items)}")

def create_basic_example(prompt: str, response: str) -> Dict[str, str]:
    """Создает базовый пример объяснения."""
    # Упрощаем ответ для базового уровня
    simple_response = response.split('.')[0] + '.'
    
    return {
        'explanation': simple_response,
        'analogy': f"Это как {generate_analogy(prompt)}",
        'example': f"Например, {generate_simple_example(prompt)}"
    }

def create_intermediate_example(prompt: str, response: str) -> Dict[str, str]:
    """Создает пример среднего уровня сложности."""
    # Используем основную часть ответа
    main_response = '.'.join(response.split('.')[:2]) + '.'
    
    return {
        'explanation': main_response,
        'practical_example': generate_practical_example(prompt),
        'important_points': generate_important_points(response)
    }

def create_advanced_example(prompt: str, response: str) -> Dict[str, str]:
    """Создает продвинутый пример объяснения."""
    return {
        'explanation': response,
        'technical_details': generate_technical_details(prompt, response),
        'case_study': generate_case_study(prompt)
    }

def generate_analogy(prompt: str) -> str:
    """Генерирует аналогию для концепции."""
    # Базовые аналогии для ключевых концепций
    analogies = {
        "риск нарушения непрерывности": "страховка для бизнеса: вы готовитесь к проблемам заранее, чтобы не допустить остановки",
        "угроза непрерывности": "гроза, которая может привести к отключению электричества в доме",
        "оценка критичности": "определение, какие органы в теле наиболее важны и требуют особой защиты",
        "экономические потери": "деньги, которые вы теряете, когда магазин закрыт из-за аварии",
        "репутационные последствия": "как люди будут относиться к ресторану после новости о несвежих продуктах",
        "целевое время восстановления": "максимальное время, за которое нужно починить сломавшийся холодильник с продуктами"
    }
    
    # Ищем подходящую аналогию
    for key, value in analogies.items():
        if key in prompt.lower():
            return value
    
    # Если ничего не нашли, возвращаем общую аналогию
    return "подготовка к любым неожиданностям, чтобы бизнес не останавливался"

def generate_simple_example(prompt: str) -> str:
    """Генерирует простой пример для концепции."""
    # Базовые примеры для ключевых концепций
    examples = {
        "риск нарушения непрерывности": "при отключении электроэнергии банк не может обслуживать клиентов",
        "угроза непрерывности": "пожар в офисном здании, который может привести к эвакуации сотрудников",
        "оценка критичности": "определение, что система платежей важнее, чем внутренний портал с новостями",
        "экономические потери": "банк теряет 1 миллион рублей за каждый час простоя системы платежей",
        "репутационные последствия": "клиенты пишут негативные отзывы в соцсетях из-за недоступности сервиса",
        "целевое время восстановления": "система должна восстановиться за 2 часа после сбоя"
    }
    
    # Ищем подходящий пример
    for key, value in examples.items():
        if key in prompt.lower():
            return value
    
    # Если ничего не нашли, возвращаем общий пример
    return "при сбое в работе ИТ-систем банка нужно быстро восстановить работу, чтобы клиенты не пострадали"

def generate_practical_example(prompt: str) -> str:
    """Генерирует практический пример для концепции."""
    # Практические примеры для ключевых концепций
    examples = {
        "риск нарушения непрерывности": "Банк создал резервный дата-центр в другом городе, чтобы в случае аварии в основном центре все критические системы продолжили работу",
        "угроза непрерывности": "В 2023 году наводнение затопило офис банка, но благодаря заранее подготовленному плану переезда в резервный офис работа была восстановлена за 4 часа",
        "оценка критичности": "ИТ-отдел банка провел анализ и определил, что система онлайн-банкинга должна работать 24/7, а система формирования отчетности может быть недоступна до 24 часов",
        "экономические потери": "Банк подсчитал, что каждый час простоя системы обработки платежей приводит к потере 2 миллионов рублей и задержке около 10 000 платежей",
        "репутационные последствия": "После 3-часового сбоя в работе мобильного приложения банка в социальных сетях появилось более 500 негативных комментариев, а 20 клиентов закрыли счета",
        "целевое время восстановления": "Для системы онлайн-банкинга установлено целевое время восстановления 1 час, для этого подготовлены резервные серверы и выделенная команда ИТ-специалистов"
    }
    
    # Ищем подходящий пример
    for key, value in examples.items():
        if key in prompt.lower():
            return value
    
    # Если ничего не нашли, возвращаем общий пример
    return "Один из крупных банков разработал подробный план обеспечения непрерывности, который помог восстановить работу всех систем за 2 часа после масштабного отключения электроэнергии"

def generate_important_points(response: str) -> List[str]:
    """Выделяет важные моменты из ответа."""
    # Разбиваем ответ на предложения
    sentences = [s.strip() for s in response.split('.') if s.strip()]
    
    # Выбираем до 3 предложений
    if len(sentences) <= 3:
        return [s + '.' for s in sentences]
    else:
        # Берем первое и два случайных из оставшихся
        selected = [sentences[0]] + random.sample(sentences[1:], 2)
        return [s + '.' for s in selected]

def generate_technical_details(prompt: str, response: str) -> str:
    """Генерирует технические детали для концепции."""
    # Технические детали для ключевых концепций
    details = {
        "риск нарушения непрерывности": "В соответствии с методологией ISO 22301, риски непрерывности классифицируются по вероятности, воздействию и скорости наступления. Для банков регулятор устанавливает дополнительные требования по документированию и тестированию планов.",
        "угроза непрерывности": "Современные методики оценки угроз включают множество факторов: географическое положение, историю инцидентов, тенденции киберугроз, взаимозависимости инфраструктуры и геополитические факторы.",
        "оценка критичности": "Методология OCTAVE (Operationally Critical Threat, Asset, and Vulnerability Evaluation) позволяет провести детальную оценку критичности с учетом бизнес-перспективы, инфраструктурных зависимостей и компонентов безопасности.",
        "экономические потери": "Для точной оценки экономических потерь используется метод NPV (Net Present Value) с дисконтированием будущих денежных потоков, учитывающий как прямые расходы, так и упущенные возможности.",
        "репутационные последствия": "Современные методики оценки репутационных рисков включают мониторинг социальных медиа с использованием AI-алгоритмов для анализа тональности и охвата, а также корреляцию с метриками лояльности клиентов.",
        "целевое время восстановления": "Оптимальное целевое время восстановления определяется на основе анализа ROI, где учитываются затраты на резервирование в сравнении с потенциальными потерями при разной длительности простоя."
    }
    
    # Ищем подходящие технические детали
    for key, value in details.items():
        if key in prompt.lower():
            return value
    
    # Если ничего не нашли, возвращаем общие технические детали
    return "Методология BCP (Business Continuity Planning) включает детальный анализ воздействия на бизнес (BIA), определение стратегий восстановления, разработку и тестирование планов, а также непрерывное обучение сотрудников и аудит готовности."

def generate_case_study(prompt: str) -> str:
    """Генерирует кейс-стади для концепции."""
    # Кейсы для ключевых концепций
    cases = {
        "риск нарушения непрерывности": "В 2019 году крупный банк столкнулся с масштабной DDoS-атакой, которая могла привести к остановке онлайн-сервисов. Благодаря заранее внедренной архитектуре с географически распределенными ресурсами и автоматическим переключением трафика между дата-центрами, клиенты не заметили проблем, а сервисы продолжили работу в штатном режиме.",
        
        "угроза непрерывности": "Во время пандемии COVID-19 в 2020 году банк смог за 48 часов перевести 90% сотрудников на удаленную работу без нарушения бизнес-процессов. Это стало возможным благодаря регулярным тестированиям сценария массового перехода на удаленную работу и заблаговременной подготовке ИТ-инфраструктуры.",
        
        "оценка критичности": "При слиянии двух финансовых организаций в 2018 году была проведена комплексная оценка критичности всех процессов. Это позволило выделить 15 критически важных систем, которые должны были работать без перерыва. Для каждой системы был разработан специальный план миграции с нулевым временем простоя, что обеспечило бесперебойное обслуживание клиентов в течение всего процесса объединения.",
        
        "экономические потери": "В 2022 году в результате масштабной кибератаки один из европейских банков потерял доступ к своим системам на 36 часов. Общий экономический ущерб составил более 75 млн евро: 18 млн прямых потерь (включая штрафы), 32 млн из-за невозможности проведения операций и 25 млн на восстановление репутации. Из-за отсутствия плана восстановления для подобного сценария время простоя оказалось в 3 раза больше, чем у конкурентов в аналогичных ситуациях.",
        
        "репутационные последствия": "Банк, столкнувшийся с утечкой данных в 2021 году, применил стратегию немедленного информирования клиентов и регуляторов, а также предложил пострадавшим бесплатную защиту от мошенничества. Несмотря на серьезность инцидента, уровень доверия клиентов упал лишь на 5%, в то время как у конкурента, который скрывал подобную утечку в течение месяца, отток клиентов составил 23%.",
        
        "целевое время восстановления": "Финансовая компания установила целевое время восстановления 15 минут для платежной системы. После внедрения автоматического переключения на резервный центр обработки данных реальное время восстановления составило 8 минут при полном отказе основного центра. Это позволило сэкономить около 5 млн долларов потенциальных убытков во время реального инцидента в 2023 году."
    }
    
    # Ищем подходящий кейс
    for key, value in cases.items():
        if key in prompt.lower():
            return value
    
    # Если ничего не нашли, возвращаем общий кейс
    return "В 2021 году крупный банк успешно отразил масштабную атаку шифровальщиков благодаря многоуровневой системе защиты и изолированным резервным копиям. Несмотря на попытку злоумышленников нарушить работу всех систем, банк смог восстановить полную функциональность за 6 часов, в то время как конкуренты, столкнувшиеся с подобными атаками, тратили на восстановление от нескольких дней до недель."

# Функция для запуска создания расширенной базы знаний
def run_knowledge_enhancement():
    """Запускает создание расширенной базы знаний."""
    print("Начало создания расширенной базы знаний...")
    create_enhanced_knowledge_base()
    print("Создание расширенной базы знаний завершено.")

if __name__ == "__main__":
    run_knowledge_enhancement()