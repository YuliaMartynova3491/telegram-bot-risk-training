"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LM Studio.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫.
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é urllib3.
"""
import logging
import time
import requests
import json
from typing import Optional, Dict, Any, List

logger = logging.getLogger(__name__)

class LMStudioClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LM Studio."""
    
    def __init__(self, base_url: str, timeout: int = 30, max_retries: int = 3):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ LM Studio.
        
        Args:
            base_url: –ë–∞–∑–æ–≤—ã–π URL LM Studio (–Ω–∞–ø—Ä–∏–º–µ—Ä, http://localhost:1234/v1)
            timeout: –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        """
        self.base_url = base_url.rstrip('/')
        self.timeout = timeout
        self.max_retries = max_retries
        self.available_models = []
        self.current_model = None
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å–µ—Å—Å–∏—è –±–µ–∑ retry –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.session = requests.Session()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.is_available = self._check_connection()
        if self.is_available:
            self._load_models()
    
    def _check_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LM Studio."""
        try:
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LM Studio: {self.base_url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º models endpoint —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
            models_url = f"{self.base_url}/models"
            response = self.session.get(models_url, timeout=5)
            
            if response.status_code == 200:
                logger.info("‚úÖ LM Studio models endpoint –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
            
            logger.warning(f"‚ùå LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            return False
            
        except requests.exceptions.ConnectionError:
            logger.warning("‚ùå LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)")
            return False
        except requests.exceptions.Timeout:
            logger.warning("‚ùå LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç–∞–π–º–∞—É—Ç)")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ LM Studio: {e}")
            return False
    
    def _load_models(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π."""
        try:
            models_url = f"{self.base_url}/models"
            response = self.session.get(models_url, timeout=self.timeout)
            
            if response.status_code == 200:
                models_data = response.json()
                self.available_models = models_data.get('data', [])
                
                if self.available_models:
                    self.current_model = self.available_models[0]['id']
                    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.available_models)} –º–æ–¥–µ–ª–µ–π")
                    logger.info(f"üìå –ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {self.current_model}")
                    
                    # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
                    for model in self.available_models:
                        logger.info(f"   - {model.get('id', 'unknown')}")
                else:
                    logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ LM Studio")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏ (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π: {e}")
    
    def test_chat(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —á–∞—Ç–∞ —Å –º–æ–¥–µ–ª—å—é."""
        if not self.is_available or not self.current_model:
            return False
        
        try:
            test_message = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç."
            response = self.generate_response(test_message, max_tokens=10)
            
            if response and len(response.strip()) > 0:
                logger.info(f"‚úÖ –¢–µ—Å—Ç —á–∞—Ç–∞ —É—Å–ø–µ—à–µ–Ω: {response[:50]}...")
                return True
            else:
                logger.warning("‚ö†Ô∏è –¢–µ—Å—Ç —á–∞—Ç–∞: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —á–∞—Ç–∞: {e}")
            return False
    
    def _make_request_with_retry(self, url: str, data: dict, headers: dict) -> Optional[requests.Response]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
        for attempt in range(self.max_retries):
            try:
                response = self.session.post(url, headers=headers, json=data, timeout=self.timeout)
                return response
            except requests.exceptions.Timeout:
                logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}/{self.max_retries}")
                if attempt < self.max_retries - 1:
                    time.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                continue
            except requests.exceptions.ConnectionError:
                logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}/{self.max_retries}")
                self.is_available = False
                if attempt < self.max_retries - 1:
                    time.sleep(2 ** attempt)
                continue
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
                if attempt < self.max_retries - 1:
                    time.sleep(1)
                continue
        
        return None
    
    def generate_response(
        self, 
        message: str, 
        temperature: float = 0.7, 
        max_tokens: int = 1500,
        system_prompt: Optional[str] = None
    ) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç LM Studio.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            max_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            
        Returns:
            –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.is_available or not self.current_model:
            logger.warning("LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return None
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = []
            if system_prompt:
                messages.append({"role": "system", "content": system_prompt})
            messages.append({"role": "user", "content": message})
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            data = {
                "model": self.current_model,
                "messages": messages,
                "temperature": temperature,
                "max_tokens": max_tokens,
                "stream": False
            }
            
            headers = {"Content-Type": "application/json"}
            chat_url = f"{self.base_url}/chat/completions"
            
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ LM Studio: {message[:50]}...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            response = self._make_request_with_retry(chat_url, data, headers)
            
            if response and response.status_code == 200:
                response_data = response.json()
                content = response_data.get('choices', [{}])[0].get('message', {}).get('content', '')
                
                if content.strip():
                    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç LM Studio: {content[:50]}...")
                    return content.strip()
                else:
                    logger.warning("LM Studio –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                    return None
            elif response:
                logger.error(f"–û—à–∏–±–∫–∞ LM Studio: {response.status_code} - {response.text[:200]}")
                return None
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç LM Studio –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
                return None
                
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ LM Studio: {e}")
            return None
    
    def answer_question(self, question: str, context: str = "") -> str:
        """
        –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–∏—Å–∫–∞—Ö –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏.
        
        Args:
            question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç (–º–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞)
            
        Returns:
            –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
        """
        if not self.is_available:
            return self._get_fallback_answer(question)
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        system_prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∏—Å–∫–∞–º –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π. 
–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ç–∫–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ. 
–ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π –µ—ë. 
–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –¥–∞–π –æ–±—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π –æ —Ä–∏—Å–∫–∞—Ö –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏."""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        if context:
            user_prompt = f"""–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞:
{context}

–í–æ–ø—Ä–æ—Å —Å—Ç—É–¥–µ–Ω—Ç–∞: {question}

–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —É—Ä–æ–∫–∞ –∏ —Ç–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π –æ —Ä–∏—Å–∫–∞—Ö –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        else:
            user_prompt = f"""–í–æ–ø—Ä–æ—Å —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ —Ä–∏—Å–∫–∞—Ö –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {question}

–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ."""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = self.generate_response(
            user_prompt, 
            temperature=0.3,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            max_tokens=1000,
            system_prompt=system_prompt
        )
        
        if response:
            return response
        else:
            return self._get_fallback_answer(question)
    
    def _get_fallback_answer(self, question: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LM Studio."""
        question_lower = question.lower()
        
        # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if "—Ä–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏" in question_lower:
            return """–†–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - —ç—Ç–æ —Ä–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, –≤–∫–ª—é—á–∞—é—â—É—é –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –æ–ø–µ—Ä–∞—Ü–∏–π, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è —É–≥—Ä–æ–∑ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏.

–≠—Ç–æ—Ç —Ä–∏—Å–∫ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–≤–∏–¥–æ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–∏—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π —Å—Ö–µ–º–µ: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, –æ—Ü–µ–Ω–∫–∞, —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."""
        
        elif "—É–≥—Ä–æ–∑–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏" in question_lower:
            return """–£–≥—Ä–æ–∑–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ (—á—Ä–µ–∑–≤—ã—á–∞–π–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è) - —ç—Ç–æ –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏, —Å–ª–æ–∂–∏–≤—à–∞—è—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∞–≤–∞—Ä–∏–∏, –æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–∏—Ä–æ–¥–Ω–æ–≥–æ —è–≤–ª–µ–Ω–∏—è, –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –∏ –¥—Ä—É–≥–∏—Ö –±–µ–¥—Å—Ç–≤–∏–π.

–£–≥—Ä–æ–∑—ã –¥–µ–ª—è—Ç—Å—è –Ω–∞ —Ç–∏–ø—ã: —Ç–µ—Ö–Ω–æ–≥–µ–Ω–Ω—ã–µ, –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ, –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ, –±–∏–æ–ª–æ–≥–æ-—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ, —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ."""
        
        elif "rto" in question_lower or "–≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è" in question_lower:
            return """RTO (Recovery Time Objective) - –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ - —ç—Ç–æ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ—Å–ª–µ –µ–≥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è —É–≥—Ä–æ–∑—ã –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏."""
        
        elif "mtpd" in question_lower or "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π" in question_lower:
            return """MTPD (Maximum Tolerable Period of Disruption) - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ—Å—Ç–æ—è - —ç—Ç–æ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏, –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–º–∏."""
        
        elif "–æ–±—ä–µ–∫—Ç —Ä–∏—Å–∫–∞" in question_lower or "–æ–±—ä–µ–∫—Ç–æ–º —Ä–∏—Å–∫–∞" in question_lower:
            return """–û–±—ä–µ–∫—Ç–æ–º —Ä–∏—Å–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å, –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–∫ '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–π', –∞ —Ç–∞–∫–∂–µ –µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç—ã: RTO, MTPD, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã, –æ—Ñ–∏—Å—ã, –ø–µ—Ä—Å–æ–Ω–∞–ª, –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥ –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞."""
        
        elif "—Å—Ü–µ–Ω–∞—Ä–∏–π —É–≥—Ä–æ–∑" in question_lower or "—Å—Ü–µ–Ω–∞—Ä–∏–∏ —É–≥—Ä–æ–∑" in question_lower:
            return """–°—Ü–µ–Ω–∞—Ä–∏–π —É–≥—Ä–æ–∑—ã –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ ‚Äì —ç—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∏—Å–∫–∞. –°—Ü–µ–Ω–∞—Ä–∏–∏ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–æ–≤ —É–≥—Ä–æ–∑ –∏ –≤–∫–ª—é—á–∞—é—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —É–≥—Ä–æ–∑—ã, –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–ª—è –ë–∞–Ω–∫–∞ –∏ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã."""
        
        elif "—Ä–µ–π—Ç–∏–Ω–≥ —Ä–∏—Å–∫–∞" in question_lower:
            return """–†–µ–π—Ç–∏–Ω–≥ —Ä–∏—Å–∫–∞ ‚Äì —ç—Ç–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Ä–∏—Å–∫–∞, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –µ–≥–æ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏. –†–µ–π—Ç–∏–Ω–≥ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—Ç—Ä–∏—Ü, –≥–¥–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ —Ä–∏—Å–∫–∞ –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≥—Ä–æ–∑—ã."""
        
        else:
            return f"""–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ —Ä–∏—Å–∫–∞—Ö –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —è –Ω–µ –º–æ–≥—É –¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –†–µ–∫–æ–º–µ–Ω–¥—É—é:

1. –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —É—Ä–æ–∫–∞
2. –ò–∑—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è: —Ä–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏, —É–≥—Ä–æ–∑—ã –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏, RTO, MTPD
3. –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ."""
    
    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞."""
        return {
            "available": self.is_available,
            "base_url": self.base_url,
            "current_model": self.current_model,
            "models_count": len(self.available_models),
            "timeout": self.timeout
        }


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
def create_lm_studio_client(base_url: str = None, timeout: int = 30) -> LMStudioClient:
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ LM Studio."""
    if base_url is None:
        from app.config import LLM_MODEL_PATH
        base_url = LLM_MODEL_PATH
    
    return LMStudioClient(base_url, timeout)