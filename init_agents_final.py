#!/usr/bin/env python
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤.
"""

# –ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
import sys
import os
import argparse
import logging
import json

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ –≤ –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
print("üöÄ –°–∫—Ä–∏–ø—Ç init_agents_final.py –∑–∞–ø—É—â–µ–Ω!")

def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    logging.basicConfig(
        format="%(asctime)s - %(levelname)s - %(message)s",
        level=logging.INFO,
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler("agents_init.log")
        ]
    )
    return logging.getLogger(__name__)

def check_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞."""
    logger = logging.getLogger(__name__)
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from app.config import TELEGRAM_TOKEN, DATABASE_URL, LLM_MODEL_PATH
        
        if TELEGRAM_TOKEN:
            masked_token = TELEGRAM_TOKEN[:4] + "*" * (len(TELEGRAM_TOKEN) - 8) + TELEGRAM_TOKEN[-4:]
            logger.info(f"‚úÖ TELEGRAM_TOKEN –Ω–∞–π–¥–µ–Ω: {masked_token}")
        else:
            logger.error("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        logger.info(f"‚úÖ DATABASE_URL: {DATABASE_URL}")
        logger.info(f"‚úÖ LLM_MODEL_PATH: {LLM_MODEL_PATH}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏."""
    logger = logging.getLogger(__name__)
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = {
        "python-telegram-bot": "telegram",
        "sqlalchemy": "sqlalchemy",
        "python-dotenv": "dotenv"
    }
    
    missing_packages = []
    
    for package_name, import_name in required_packages.items():
        try:
            __import__(import_name)
            logger.info(f"‚úÖ {package_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            logger.error(f"‚ùå {package_name} –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            missing_packages.append(package_name)
    
    if missing_packages:
        logger.error(f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã: pip install {' '.join(missing_packages)}")
        return False
    
    return True

def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    logger = logging.getLogger(__name__)
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from app.database.models import get_db, init_db
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        db = get_db()
        if db:
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def check_lm_studio():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LM Studio."""
    logger = logging.getLogger(__name__)
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ LM Studio...")
    
    try:
        import requests
        from app.config import LLM_MODEL_PATH
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π –ø–æ –∞–¥—Ä–µ—Å—É: {LLM_MODEL_PATH}/models")
        
        models_response = requests.get(
            f"{LLM_MODEL_PATH}/models",
            timeout=10
        )
        
        if models_response.status_code == 200:
            models_data = models_response.json()
            available_models = models_data.get('data', [])
            
            if available_models:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(available_models)} –º–æ–¥–µ–ª–µ–π:")
                for model in available_models:
                    logger.info(f"   - {model.get('id', 'unknown')}")
                
                # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç —Å –ø–µ—Ä–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –º–æ–¥–µ–ª—å—é
                test_model = available_models[0]['id']
                logger.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ —Å –º–æ–¥–µ–ª—å—é: {test_model}")
                
                headers = {"Content-Type": "application/json"}
                data = {
                    "model": test_model,
                    "messages": [{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç."}],
                    "temperature": 0.7,
                    "max_tokens": 10
                }
                
                chat_response = requests.post(
                    f"{LLM_MODEL_PATH}/chat/completions",
                    headers=headers,
                    json=data,
                    timeout=60  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–æ–π –º–æ–¥–µ–ª–∏
                )
                
                if chat_response.status_code == 200:
                    response_data = chat_response.json()
                    content = response_data.get('choices', [{}])[0].get('message', {}).get('content', '')
                    
                    logger.info(f"‚úÖ LM Studio –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω!")
                    logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {test_model}")
                    logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {content}")
                    return True
                else:
                    logger.error(f"‚ùå –ß–∞—Ç API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {chat_response.status_code})")
                    logger.error(f"–û—Ç–≤–µ—Ç: {chat_response.text[:200]}...")
                    return False
            else:
                logger.error("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ LM Studio")
                return False
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π (—Å—Ç–∞—Ç—É—Å: {models_response.status_code})")
            return False
            
    except requests.exceptions.ConnectionError:
        logger.error("‚ùå LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä)")
        return False
    except requests.exceptions.Timeout:
        logger.warning("‚ö†Ô∏è LM Studio –æ—Ç–≤–µ—á–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ (–º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç—è–∂–µ–ª–æ–π)")
        logger.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Ç–∞–π–º–∞—É—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ª–µ–≥–∫—É—é –º–æ–¥–µ–ª—å")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ LM Studio: {e}")
        return False

def create_directories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
    logger = logging.getLogger(__name__)
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    directories = [
        "app/knowledge",
        "app/knowledge/jsonl",
        "app/langchain"
    ]
    
    for directory in directories:
        try:
            os.makedirs(directory, exist_ok=True)
            logger.info(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory} —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
            
            # –°–æ–∑–¥–∞–µ–º __init__.py –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            init_file = os.path.join(directory, "__init__.py")
            if not os.path.exists(init_file):
                with open(init_file, 'w', encoding='utf-8') as f:
                    f.write(f'"""–ú–æ–¥—É–ª—å {directory.replace("/", ".")}."""\n')
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω {init_file}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {directory}: {e}")
            return False
    
    return True

def create_knowledge_base():
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π."""
    logger = logging.getLogger(__name__)
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
    
    knowledge_file = "app/knowledge/jsonl/risk_knowledge.jsonl"
    
    if os.path.exists(knowledge_file):
        logger.info(f"‚úÖ –§–∞–π–ª {knowledge_file} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True
    
    try:
        # –ë–∞–∑–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –∑–Ω–∞–Ω–∏–π
        knowledge_items = [
            {
                "prompt": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
                "response": "–†–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - —ç—Ç–æ —Ä–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å.",
                "metadata": {
                    "topic": "—Ä–∏—Å–∫_–Ω–∞—Ä—É—à–µ–Ω–∏—è_–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏",
                    "difficulty": "–±–∞–∑–æ–≤—ã–π",
                    "keywords": ["–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å", "–∫—Ä–µ–¥–∏—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"]
                }
            },
            {
                "prompt": "–ß—Ç–æ —Ç–∞–∫–æ–µ —É–≥—Ä–æ–∑–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏?",
                "response": "–£–≥—Ä–æ–∑–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ - —ç—Ç–æ –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞, —Å–ª–æ–∂–∏–≤—à–∞—è—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∞–≤–∞—Ä–∏–∏, –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã –∏–ª–∏ –∏–Ω–æ–≥–æ –±–µ–¥—Å—Ç–≤–∏—è.",
                "metadata": {
                    "topic": "—Ä–∏—Å–∫_–Ω–∞—Ä—É—à–µ–Ω–∏—è_–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏",
                    "difficulty": "–±–∞–∑–æ–≤—ã–π",
                    "keywords": ["—É–≥—Ä–æ–∑–∞", "–∞–≤–∞—Ä–∏—è", "–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞"]
                }
            }
        ]
        
        with open(knowledge_file, 'w', encoding='utf-8') as f:
            for item in knowledge_items:
                f.write(json.dumps(item, ensure_ascii=False) + '\n')
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {knowledge_file} —Å {len(knowledge_items)} –∑–∞–ø–∏—Å—è–º–∏")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
        return False

def run_all_checks():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    logger = logging.getLogger(__name__)
    
    print("\n" + "=" * 60)
    print("üîç –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ü–†–û–í–ï–†–ö–ê AI-–ê–ì–ï–ù–¢–û–í")
    print("=" * 60)
    
    checks = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", check_config),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check_dependencies),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", check_database),
        ("LM Studio", check_lm_studio),
        ("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", create_directories),
        ("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", create_knowledge_base)
    ]
    
    results = {}
    
    for check_name, check_func in checks:
        try:
            result = check_func()
            results[check_name] = result
            status = "‚úÖ –£–°–ü–ï–®–ù–û" if result else "‚ùå –û–®–ò–ë–ö–ê"
            print(f"{check_name}: {status}")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {check_name}: {e}")
            results[check_name] = False
            print(f"{check_name}: ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê")
    
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ AI-–ê–ì–ï–ù–¢–û–í")
    print("=" * 60)
    
    success_count = sum(results.values())
    total_count = len(results)
    
    print(f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ: {success_count}/{total_count} –ø—Ä–æ–≤–µ—Ä–æ–∫")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    critical_components = ["–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "LM Studio"]
    critical_success = all(results.get(key, False) for key in critical_components)
    
    if critical_success:
        print("\nüéâ AI-–ê–ì–ï–ù–¢–´ –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–´ –ö –†–ê–ë–û–¢–ï!")
        print("ü§ñ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç:")
        print("   ‚úÖ Telegram Bot API")
        print("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite")
        print("   ‚úÖ LM Studio —Å –º–æ–¥–µ–ª—å—é qwen2.5-14b-instruct")
        print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤")
        print("\nüöÄ –ó–ê–ü–£–°–ö AI-–ë–û–¢–ê:")
        print("   python -m app.main")
        
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        for component in critical_components:
            if not results.get(component, False):
                print(f"   - {component}")
        
        if not results.get("LM Studio"):
            print("\nüîß –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è LM Studio:")
            print("   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ LM Studio –∑–∞–ø—É—â–µ–Ω")
            print("   2. –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω")
            print("   3. –ü–æ—Ä—Ç 1234 —Å–≤–æ–±–æ–¥–µ–Ω")
            print("   4. CORS –≤–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
    
    return critical_success

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger = setup_logging()
        logger.info("–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI-–∞–≥–µ–Ω—Ç–æ–≤")
        
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        parser = argparse.ArgumentParser(description="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI-–∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è Telegram –±–æ—Ç–∞")
        parser.add_argument("--check-all", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
        args = parser.parse_args()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        success = run_all_checks()
        
        logger.info("–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI-–∞–≥–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return 0 if success else 1
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    print("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è main()")
    result = main()
    print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º: {result}")
    sys.exit(result)