#!/usr/bin/env python
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
init_enhanced_system.py
"""
import sys
import os
import asyncio
import argparse
import logging
import json
import time
from pathlib import Path
from typing import Dict, List, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ –≤ –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def setup_logging(verbose: bool = False):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    level = logging.DEBUG if verbose else logging.INFO
    
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=level,
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler("enhanced_system_init.log")
        ]
    )
    return logging.getLogger(__name__)

class SystemInitializer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã."""
    
    def __init__(self, logger):
        self.logger = logger
        self.checks_results = {}
        self.warnings = []
        self.errors = []
    
    async def run_full_initialization(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã."""
        self.logger.info("=" * 80)
        self.logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ENHANCED AI LEARNING BOT")
        self.logger.info("=" * 80)
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        checks = [
            ("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", self.check_configuration),
            ("üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", self.check_dependencies),
            ("üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", self.check_database),
            ("ü§ñ LM Studio", self.check_lm_studio),
            ("üß† RAG —Å–∏—Å—Ç–µ–º–∞", self.check_rag_system),
            ("üë• –°–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤", self.check_agents_system),
            ("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", self.check_knowledge_base),
            ("üéØ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤", self.check_question_generator),
            ("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º", self.check_system_integration),
            ("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", self.check_analytics_system)
        ]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        for check_name, check_func in checks:
            self.logger.info(f"\n{check_name}...")
            try:
                start_time = time.time()
                result = await check_func()
                elapsed = time.time() - start_time
                
                self.checks_results[check_name] = result
                status = "‚úÖ –£–°–ü–ï–®–ù–û" if result else "‚ùå –û–®–ò–ë–ö–ê"
                self.logger.info(f"{check_name}: {status} ({elapsed:.1f}s)")
                
            except Exception as e:
                self.checks_results[check_name] = False
                self.errors.append(f"{check_name}: {str(e)}")
                self.logger.error(f"{check_name}: ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - {e}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        return self.generate_final_report()
    
    async def check_configuration(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        try:
            from app.config import TELEGRAM_TOKEN, DATABASE_URL, LLM_MODEL_PATH
            
            if not TELEGRAM_TOKEN:
                self.errors.append("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return False
            
            if len(TELEGRAM_TOKEN) < 20:
                self.warnings.append("TELEGRAM_TOKEN –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            self.logger.info(f"‚úÖ DATABASE_URL: {DATABASE_URL}")
            self.logger.info(f"‚úÖ LLM_MODEL_PATH: {LLM_MODEL_PATH}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            required_dirs = [
                "app/knowledge",
                "app/knowledge/jsonl",
                "app/langchain",
                "logs"
            ]
            
            for dir_path in required_dirs:
                Path(dir_path).mkdir(parents=True, exist_ok=True)
                self.logger.info(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_path} –≥–æ—Ç–æ–≤–∞")
            
            return True
            
        except ImportError as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    async def check_dependencies(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
        required_packages = {
            "telegram": "python-telegram-bot",
            "sqlalchemy": "sqlalchemy", 
            "dotenv": "python-dotenv",
            "requests": "requests"
        }
        
        optional_packages = {
            "sentence_transformers": "sentence-transformers",
            "faiss": "faiss-cpu",
            "numpy": "numpy",
            "langchain": "langchain",
            "langchain_core": "langchain-core"
        }
        
        missing_required = []
        missing_optional = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
        for import_name, package_name in required_packages.items():
            try:
                __import__(import_name)
                self.logger.info(f"‚úÖ {package_name}")
            except ImportError:
                missing_required.append(package_name)
                self.logger.error(f"‚ùå {package_name} (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
        for import_name, package_name in optional_packages.items():
            try:
                __import__(import_name)
                self.logger.info(f"‚úÖ {package_name}")
            except ImportError:
                missing_optional.append(package_name)
                self.logger.warning(f"‚ö†Ô∏è {package_name} (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)")
        
        if missing_required:
            self.errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã: {', '.join(missing_required)}")
            return False
        
        if missing_optional:
            self.warnings.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã: {', '.join(missing_optional)}")
        
        return True
    
    async def check_database(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        try:
            from app.database.models import init_db, get_db, test_connection
            from app.database.operations import get_all_courses
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
            init_db()
            self.logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if not test_connection():
                self.errors.append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
            db = get_db()
            courses = get_all_courses(db)
            self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(courses)} –∫—É—Ä—Å–æ–≤ –≤ –ë–î")
            
            return True
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    async def check_lm_studio(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ LM Studio."""
        try:
            import requests
            from app.config import LLM_MODEL_PATH
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
            try:
                models_response = requests.get(f"{LLM_MODEL_PATH}/models", timeout=10)
                if models_response.status_code != 200:
                    self.warnings.append(f"LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: {models_response.status_code})")
                    return False
            except requests.exceptions.ConnectionError:
                self.warnings.append("LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)")
                return False
            except requests.exceptions.Timeout:
                self.warnings.append("LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç–∞–π–º–∞—É—Ç)")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
            models_data = models_response.json()
            available_models = models_data.get('data', [])
            
            if not available_models:
                self.warnings.append("–í LM Studio –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç API
            test_model = available_models[0]['id']
            headers = {"Content-Type": "application/json"}
            data = {
                "model": test_model,
                "messages": [{"role": "user", "content": "Test"}],
                "temperature": 0.7,
                "max_tokens": 10
            }
            
            chat_response = requests.post(
                f"{LLM_MODEL_PATH}/chat/completions",
                headers=headers,
                json=data,
                timeout=30
            )
            
            if chat_response.status_code == 200:
                response_data = chat_response.json()
                content = response_data.get('choices', [{}])[0].get('message', {}).get('content', '')
                
                self.logger.info(f"‚úÖ LM Studio –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω")
                self.logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {test_model}")
                self.logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {content}")
                return True
            else:
                self.warnings.append(f"Chat API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: {chat_response.status_code})")
                return False
            
        except Exception as e:
            self.warnings.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ LM Studio: {e}")
            return False
    
    async def check_rag_system(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ RAG —Å–∏—Å—Ç–µ–º—ã."""
        try:
            from app.knowledge.rag_advanced import rag_system, initialize_rag
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å RAG
            rag_initialized = await initialize_rag()
            
            if rag_initialized:
                self.logger.info("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
                try:
                    search_results = await rag_system.search("—Ä–∏—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏", top_k=3)
                    self.logger.info(f"‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
                    if search_results:
                        rag_response = await rag_system.generate_answer("–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏?")
                        self.logger.info(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {rag_response.confidence:.2f})")
                    
                except Exception as e:
                    self.warnings.append(f"RAG —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —á–∞—Å—Ç–∏—á–Ω–æ: {e}")
                
                return True
            else:
                self.warnings.append("RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return False
                
        except ImportError:
            self.warnings.append("RAG –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)")
            return False
        except Exception as e:
            self.warnings.append(f"–û—à–∏–±–∫–∞ RAG —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False
    
    async def check_agents_system(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤."""
        try:
            from app.langchain.enhanced_agents import enhanced_agent_system, LearningContext
            
            if enhanced_agent_system.is_available:
                self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤
                test_context = LearningContext(
                    user_id=1,
                    lesson_id=1,
                    topic="test",
                    question_text="–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å?",
                    user_answer="A",
                    correct_answer="A"
                )
                
                try:
                    assessment = await enhanced_agent_system.assess_knowledge(test_context)
                    if assessment.success:
                        self.logger.info("‚úÖ –ê–≥–µ–Ω—Ç –æ—Ü–µ–Ω–∫–∏ –∑–Ω–∞–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    else:
                        self.warnings.append("–ê–≥–µ–Ω—Ç –æ—Ü–µ–Ω–∫–∏ –∑–Ω–∞–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ")
                except Exception as e:
                    self.warnings.append(f"–û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞ –æ—Ü–µ–Ω–∫–∏: {e}")
                
                return True
            else:
                self.warnings.append("–°–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
                return False
                
        except ImportError:
            self.warnings.append("–ú–æ–¥—É–ª–∏ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return False
        except Exception as e:
            self.warnings.append(f"–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤: {e}")
            return False
    
    async def check_knowledge_base(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π."""
        try:
            from app.config import KNOWLEDGE_DIR
            
            knowledge_file = KNOWLEDGE_DIR / "jsonl" / "risk_knowledge.jsonl"
            
            if not knowledge_file.exists():
                # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
                self.create_basic_knowledge_base(knowledge_file)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            with open(knowledge_file, 'r', encoding='utf-8') as f:
                lines = [line.strip() for line in f if line.strip()]
                
            if len(lines) < 5:
                self.warnings.append("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞–ª–æ –∑–∞–ø–∏—Å–µ–π")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
            try:
                for i, line in enumerate(lines[:3]):
                    json.loads(line)
                self.logger.info(f"‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç {len(lines)} –∑–∞–ø–∏—Å–µ–π")
                return True
            except json.JSONDecodeError:
                self.errors.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
                return False
                
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            return False
    
    def create_basic_knowledge_base(self, knowledge_file: Path):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π."""
        knowledge_items = [
            {
                "prompt": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
                "response": "–†–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - —ç—Ç–æ —Ä–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, –≤–∫–ª—é—á–∞—é—â—É—é –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –æ–ø–µ—Ä–∞—Ü–∏–π, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è —É–≥—Ä–æ–∑ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏.",
                "metadata": {
                    "topic": "—Ä–∏—Å–∫_–Ω–∞—Ä—É—à–µ–Ω–∏—è_–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏",
                    "difficulty": "–±–∞–∑–æ–≤—ã–π",
                    "keywords": ["–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å", "–∫—Ä–µ–¥–∏—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å"]
                }
            },
            {
                "prompt": "–ß—Ç–æ —Ç–∞–∫–æ–µ —É–≥—Ä–æ–∑–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏?",
                "response": "–£–≥—Ä–æ–∑–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ (—á—Ä–µ–∑–≤—ã—á–∞–π–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è) - —ç—Ç–æ –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏, —Å–ª–æ–∂–∏–≤—à–∞—è—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∞–≤–∞—Ä–∏–∏, –æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–∏—Ä–æ–¥–Ω–æ–≥–æ —è–≤–ª–µ–Ω–∏—è, –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–≥–æ –æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è –æ–∫—Ä—É–∂–∞—é—â–∏—Ö, —Å—Ç–∏—Ö–∏–π–Ω–æ–≥–æ –∏–ª–∏ –∏–Ω–æ–≥–æ –±–µ–¥—Å—Ç–≤–∏—è.",
                "metadata": {
                    "topic": "—Ä–∏—Å–∫_–Ω–∞—Ä—É—à–µ–Ω–∏—è_–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏",
                    "difficulty": "–±–∞–∑–æ–≤—ã–π",
                    "keywords": ["—É–≥—Ä–æ–∑–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏", "—á—Ä–µ–∑–≤—ã—á–∞–π–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–∞–≤–∞—Ä–∏—è"]
                }
            }
        ]
        
        knowledge_file.parent.mkdir(parents=True, exist_ok=True)
        with open(knowledge_file, 'w', encoding='utf-8') as f:
            for item in knowledge_items:
                f.write(json.dumps(item, ensure_ascii=False) + '\n')
        
        self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {knowledge_file}")
    
    async def check_question_generator(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤."""
        try:
            from app.learning.question_generator import question_generator
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_profile = await question_generator.generate_user_profile(1)
            self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É—Ä–æ–≤–µ–Ω—å: {user_profile.knowledge_level:.2f})")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤
            questions = await question_generator.generate_adaptive_questions(
                topic="—Ä–∏—Å–∫_–Ω–∞—Ä—É—à–µ–Ω–∏—è_–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏",
                lesson_id=1,
                user_profile=user_profile,
                num_questions=2
            )
            
            if questions:
                self.logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(questions)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
                return True
            else:
                self.warnings.append("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
                return False
                
        except ImportError:
            self.warnings.append("–ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        except Exception as e:
            self.warnings.append(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            return False
    
    async def check_system_integration(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º."""
        try:
            from app.core.enhanced_integration import enhanced_learning_system, initialize_enhanced_system
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            integration_success = await initialize_enhanced_system()
            
            if integration_success:
                self.logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º —É—Å–ø–µ—à–Ω–∞")
                return True
            else:
                self.warnings.append("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ")
                return False
                
        except ImportError:
            self.warnings.append("–ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        except Exception as e:
            self.warnings.append(f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    async def check_analytics_system(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
        try:
            from app.core.enhanced_integration import get_enhanced_learning_analytics
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            analytics = await get_enhanced_learning_analytics(1)
            
            if analytics and "overall_stats" in analytics:
                self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
            else:
                self.warnings.append("–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ")
                return False
                
        except Exception as e:
            self.warnings.append(f"–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return False
    
    def generate_final_report(self) -> bool:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
        self.logger.info("\n" + "=" * 80)
        self.logger.info("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –°–ò–°–¢–ï–ú–´")
        self.logger.info("=" * 80)
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_checks = len(self.checks_results)
        successful_checks = sum(self.checks_results.values())
        success_rate = successful_checks / total_checks if total_checks > 0 else 0
        
        self.logger.info(f"–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {successful_checks}/{total_checks} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1%})")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.logger.info("\n–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for check_name, result in self.checks_results.items():
            status = "‚úÖ –£–°–ü–ï–®–ù–û" if result else "‚ùå –û–®–ò–ë–ö–ê"
            self.logger.info(f"  {check_name}: {status}")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if self.warnings:
            self.logger.info(f"\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(self.warnings)}):")
            for warning in self.warnings:
                self.logger.warning(f"  - {warning}")
        
        # –û—à–∏–±–∫–∏
        if self.errors:
            self.logger.info(f"\n‚ùå –û—à–∏–±–∫–∏ ({len(self.errors)}):")
            for error in self.errors:
                self.logger.error(f"  - {error}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.logger.info("\n" + "=" * 80)
        self.logger.info("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        self.logger.info("=" * 80)
        
        if success_rate >= 0.8:
            self.logger.info("üéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
            self.logger.info("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç")
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞: python -m app.main")
            
            if self.warnings:
                self.logger.info("\nüìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
                if "LM Studio" in [w for w in self.warnings if "LM Studio" in w]:
                    self.logger.info("  - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ LM Studio –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ AI")
                if "RAG" in [w for w in self.warnings if "RAG" in w]:
                    self.logger.info("  - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ sentence-transformers –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")
                if "–∞–≥–µ–Ω—Ç" in [w for w in self.warnings if "–∞–≥–µ–Ω—Ç" in w]:
                    self.logger.info("  - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
            
        else:
            self.logger.info("‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê")
            self.logger.info("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º:")
            
            for error in self.errors[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                self.logger.info(f"  üîß {error}")
        
        return success_rate >= 0.6  # –ú–∏–Ω–∏–º—É–º 60% –¥–ª—è –±–∞–∑–æ–≤–æ–π —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Enhanced AI Learning Bot")
    parser.add_argument("--verbose", "-v", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    parser.add_argument("--quick", "-q", action="store_true", help="–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (—Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã)")
    parser.add_argument("--fix", "-f", action="store_true", help="–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
    parser.add_argument("--export-report", "-e", help="–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª")
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = setup_logging(args.verbose)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        initializer = SystemInitializer(logger)
        
        # –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if args.quick:
            success = await initializer.run_quick_check()
        else:
            success = await initializer.run_full_initialization()
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if args.fix and not success:
            await initializer.attempt_fixes()
        
        # –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if args.export_report:
            initializer.export_report(args.export_report)
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if success:
            logger.info("\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return 0
        else:
            logger.error("\n‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            return 1
            
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        logger.error(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return 1

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã –≤ SystemInitializer
async def run_quick_check(self) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
    self.logger.info("üöÄ –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    self.logger.info("=" * 60)
    
    # –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    critical_checks = [
        ("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", self.check_configuration),
        ("üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", self.check_dependencies),
        ("üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", self.check_database),
        ("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", self.check_knowledge_base)
    ]
    
    for check_name, check_func in critical_checks:
        self.logger.info(f"\n{check_name}...")
        try:
            result = await check_func()
            self.checks_results[check_name] = result
            status = "‚úÖ –£–°–ü–ï–®–ù–û" if result else "‚ùå –û–®–ò–ë–ö–ê"
            self.logger.info(f"{check_name}: {status}")
        except Exception as e:
            self.checks_results[check_name] = False
            self.errors.append(f"{check_name}: {str(e)}")
            self.logger.error(f"{check_name}: ‚ùå –û–®–ò–ë–ö–ê - {e}")
    
    return self.generate_quick_report()

def generate_quick_report(self) -> bool:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
    successful = sum(self.checks_results.values())
    total = len(self.checks_results)
    success_rate = successful / total if total > 0 else 0
    
    self.logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {successful}/{total} ({success_rate:.1%})")
    
    if success_rate == 1.0:
        self.logger.info("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
        self.logger.info("üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞: python -m app.main")
    else:
        self.logger.info("‚ùå –ù–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        for error in self.errors:
            self.logger.error(f"  - {error}")
    
    return success_rate >= 0.75

async def attempt_fixes(self):
    """–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º."""
    self.logger.info("\nüîß –ü–û–ü–´–¢–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú")
    self.logger.info("=" * 50)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    await self._fix_directories()
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    await self._fix_knowledge_base()
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    await self._fix_configuration()
    
    self.logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

async def _fix_directories(self):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π."""
    required_dirs = [
        "app/knowledge",
        "app/knowledge/jsonl", 
        "app/langchain",
        "logs",
        "temp",
        "cache"
    ]
    
    for dir_path in required_dirs:
        try:
            Path(dir_path).mkdir(parents=True, exist_ok=True)
            self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å {dir_path}: {e}")

async def _fix_knowledge_base(self):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π."""
    try:
        from app.config import KNOWLEDGE_DIR
        knowledge_file = KNOWLEDGE_DIR / "jsonl" / "risk_knowledge.jsonl"
        
        if not knowledge_file.exists() or knowledge_file.stat().st_size < 100:
            self.create_basic_knowledge_base(knowledge_file)
            self.logger.info("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π: {e}")

async def _fix_configuration(self):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
        env_file = Path(".env")
        if not env_file.exists():
            env_example = Path(".env.example")
            if env_example.exists():
                import shutil
                shutil.copy(env_example, env_file)
                self.logger.info("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env –∏–∑ —à–∞–±–ª–æ–Ω–∞")
                self.logger.warning("‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å .env —Ñ–∞–π–ª —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏!")
    except Exception as e:
        self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")

def export_report(self, filename: str):
    """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª."""
    try:
        report_data = {
            "timestamp": time.time(),
            "checks_results": self.checks_results,
            "warnings": self.warnings,
            "errors": self.errors,
            "success_rate": sum(self.checks_results.values()) / len(self.checks_results) if self.checks_results else 0
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, ensure_ascii=False, indent=2)
        
        self.logger.info(f"üìÑ –û—Ç—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {filename}")
        
    except Exception as e:
        self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –≤ –∫–ª–∞—Å—Å SystemInitializer
SystemInitializer.run_quick_check = run_quick_check
SystemInitializer.generate_quick_report = generate_quick_report
SystemInitializer.attempt_fixes = attempt_fixes
SystemInitializer._fix_directories = _fix_directories
SystemInitializer._fix_knowledge_base = _fix_knowledge_base
SystemInitializer._fix_configuration = _fix_configuration
SystemInitializer.export_report = export_report

if __name__ == "__main__":
    sys.exit(asyncio.run(main()))